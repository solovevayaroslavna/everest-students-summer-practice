---
name: FE CI
on:
  push:
    paths:
      - 'ui/**'
      - '.github/workflows/dev-fe-ci.yaml'
    branches:
      - main
  pull_request_target:
    paths:
      - 'ui/**'
      - '.github/workflows/dev-fe-ci.yaml'
    types: [opened, synchronize]

permissions:
  contents: read
  packages: write
  checks: write
  pull-requests: write
  repository-projects: read

env:
  NODE_OPTIONS: 'â€”-max_old_space_size=4096'

jobs:
  cache_pnpm:
    name: Cache PNPM
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
          cache-dependency-path: 'ui/pnpm-lock.yaml'

      - name: Install dependencies
        run: cd ui && make init

  CI_checks:
    runs-on: ubuntu-latest
    needs: cache_pnpm
    strategy:
      matrix:
        action: ['lint', 'format', 'test', 'build']
    defaults:
      run:
        working-directory: ui
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
          cache-dependency-path: 'ui/pnpm-lock.yaml'

      - run: make init

      - name: lint
        if: matrix.action == 'lint'
        run: make lint

      - name: format
        if: matrix.action == 'format'
        run: make format

      - name: test
        if: matrix.action == 'test'
        run: make test

      - name: build
        if: matrix.action == 'build'
        run: make build

      - name: Check for changes
        id: check_changes
        run: |
          git config --global user.email "ci-bot@percona.com"
          git config --global user.name "CI Bot"
          git diff --exit-code || echo "::set-output name=changes::true"

      - uses: stefanzweifel/git-auto-commit-action@v5
        if: steps.check_changes.outputs.changes == 'true' && github.event_name == 'pull_request'
        with:
          commit_message: 'chore: lint/format'

  E2E:
    name: E2E Tests
    needs: cache_pnpm
    runs-on: ubuntu-20.04
    steps:
      - name: Get User Permission
        id: checkAccess
        uses: actions-cool/check-user-permission@v2
        with:
          require: write
          username: ${{ github.triggering_actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check User Permission
        if: steps.checkAccess.outputs.require-result == 'false'
        run: |
          echo "${{ github.triggering_actor }} does not have permissions on this repo."
          exit 1

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          lfs: true
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
          cache-dependency-path: ui/pnpm-lock.yaml

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Set up Go release
        uses: percona-platform/setup-go@v4
        with:
          go-version: 1.22.x

      - name: Set GO_VERSION environment variable
        run: |
          go version
          echo "GO_VERSION=$(go version)" >> $GITHUB_ENV

      - name: Create KIND cluster
        uses: helm/kind-action@v1.9.0

      - name: Add Helm Percona repository
        run: |
          helm repo add percona https://percona.github.io/percona-helm-charts/

      - name: Install Helm PMM chart
        run: |
          helm install pmm --set secret.pmm_password='admin',service.type=ClusterIP percona/pmm

      - name: Echo PMM credentials
        run: |
          url=$(kubectl get svc/monitoring-service -o json | jq -r '.spec.clusterIP')
          echo -n "MONITORING_URL=http://$url" >> $GITHUB_ENV

      - name: Run Provisioning
        run: |
          make build-cli
          ./bin/everestctl install -v \
          --version 0.0.0 \
          --version-metadata-url https://check-dev.percona.com \
          --operator.mongodb \
          --operator.postgresql \
          --operator.xtradb-cluster \
          --skip-wizard \
          --namespaces everest-ui

      - name: Adding psmdb namespace
        run: |
          ./bin/everestctl install -v \
          --version 0.0.0 \
          --version-metadata-url https://check-dev.percona.com \
          --operator.mongodb \
          --operator.postgresql=false \
          --operator.xtradb-cluster=false \
          --skip-wizard \
          --namespaces psmdb-only

      - name: Adding pxc namespace
        run: |
          ./bin/everestctl install -v \
          --version 0.0.0 \
          --version-metadata-url https://check-dev.percona.com \
          --operator.mongodb=false \
          --operator.postgresql=false \
          --operator.xtradb-cluster \
          --skip-wizard \
          --namespaces pxc-only

      - name: Adding pg namespace
        run: |
          ./bin/everestctl install -v \
          --version 0.0.0 \
          --version-metadata-url https://check-dev.percona.com \
          --operator.mongodb=false \
          --operator.postgresql \
          --operator.xtradb-cluster=false \
          --skip-wizard \
          --namespaces pg-only

      - name: Change token
        run: |
          echo "EVEREST_K8_TOKEN=$(./bin/everestctl token reset --json | jq .token -r)" >> $GITHUB_ENV

      - name: Expose Everest API Server
        run: |
          kubectl port-forward -n everest-system deployment/percona-everest 8080:8080 &

      - name: Run Everest
        run: |
          cd ui
          make init
          pnpm --filter "@percona/everest" dev &

      - name: Install Chromium for Playwright
        run: |
          cd ui/apps/everest
          npx playwright install chromium

      - name: Run integration tests
        env:
          EVEREST_LOCATION_BUCKET_NAME: '${{ secrets.BACKUP_LOCATION_BUCKET_NAME }}'
          EVEREST_LOCATION_ACCESS_KEY: '${{ secrets.BACKUP_LOCATION_ACCESS_KEY }}'
          EVEREST_LOCATION_SECRET_KEY: '${{ secrets.BACKUP_LOCATION_SECRET_KEY }}'
          EVEREST_LOCATION_REGION: '${{ secrets.BACKUP_LOCATION_REGION }}'
          EVEREST_LOCATION_URL: '${{ secrets.BACKUP_LOCATION_URL }}'
          MONITORING_USER: 'admin'
          MONITORING_PASSWORD: 'admin'
        run: |
          cd ui
          pnpm --filter "@percona/everest" e2e

  merge-gatekeeper:
    needs: [CI_checks, E2E]
    name: Merge Gatekeeper
    if: ${{ always() }}
    runs-on: ubuntu-22.04
    steps:
      - name: Run Merge Gatekeeper
        uses: upsidr/merge-gatekeeper@v1.2.1
        with:
          self: Merge Gatekeeper
          token: ${{ secrets.GITHUB_TOKEN }}
          interval: 45
          timeout: 300
          ignored: 'license/snyk (Percona Github Org), security/snyk (Percona Github Org)'
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
