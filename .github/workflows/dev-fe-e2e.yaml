name: FE E2E Workflow

on:
  workflow_call:
    secrets:
      CI_USER:
        required: true
      CI_PASSWORD:
        required: true
      RBAC_USER:
        required: true
      RBAC_PASSWORD:
        required: true

jobs:
  e2e:
    strategy:
      fail-fast: true
    continue-on-error: false
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          lfs: true
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Set up Go release
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      # Switch docker data directory to /mnt to have more space for the local Kubernetes cluster
      - name: Switch docker-daemon data directory to /mnt
        run: |
          sudo systemctl stop docker
          echo '{ "exec-opts": ["native.cgroupdriver=cgroupfs"], "cgroup-parent": "/actions_job", "data-root": "/mnt/docker-data" }' | sudo tee /etc/docker/daemon.json
          sudo mkdir /mnt/docker-data
          sudo systemctl start docker

      # Setup Node
      - uses: pnpm/action-setup@v4
        with:
          version: 9.4.0

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "pnpm"
          cache-dependency-path: ui/pnpm-lock.yaml

      - name: Start local Kubernetes cluster with the local registry
        uses: medyagh/setup-minikube@latest
        id: minikube
        with:
          cpus: 4
          memory: 12g
          addons: registry
          insecure-registry: "localhost:5000"

      - name: Expose local registry
        run: |
          kubectl port-forward --namespace kube-system service/registry 5000:80 &

      - name: Set MinIO
        run: kubectl apply -f ./.github/minio.conf.yaml

      - name: Add Helm Percona repository
        shell: bash
        run: |
          go tool helm repo add percona https://percona.github.io/percona-helm-charts/

      - name: Install Helm PMM chart
        shell: bash
        run: |
          go tool helm install pmm --set secret.pmm_password='admin',service.type=ClusterIP percona/pmm

      - name: Echo PMM credentials
        shell: bash
        run: |
          url=$(kubectl get svc/monitoring-service -o json | jq -r '.spec.clusterIP')
          echo -n "MONITORING_URL=http://$url" >> $GITHUB_ENV

      - name: Build Everest API Server
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 make build-debug

      - name: Build Everest docker container
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: localhost:5000/perconalab/everest
          tags: 0.0.0

      - name: Build and Push everest dev image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Build CLI
        shell: bash
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 make build-cli

      - name: Install Everest
        shell: bash
        run: |
          ./bin/everestctl install -v \
          --disable-telemetry \
          --version 0.0.0 \
          --version-metadata-url https://check-dev.percona.com \
          --skip-wizard \
          --skip-db-namespace \
          --helm.set server.image=localhost:5000/perconalab/everest \
          --helm.set server.apiRequestsRateLimit=200 \
          --helm.set versionMetadataURL=https://check-dev.percona.com

      - name: Add everest-ui namespace
        shell: bash
        run: |
          ./bin/everestctl namespaces add everest-ui -v \
          --operator.mongodb=true \
          --operator.postgresql=true \
          --operator.mysql=true \
          --skip-wizard

      - name: Adding psmdb namespace
        shell: bash
        run: |
          ./bin/everestctl namespaces add psmdb-only -v \
          --operator.mongodb=true \
          --operator.postgresql=false \
          --operator.mysql=false \
          --skip-wizard

      - name: Adding pxc namespace
        shell: bash
        run: |
          ./bin/everestctl namespaces add pxc-only -v \
          --operator.mongodb=false \
          --operator.postgresql=false \
          --operator.mysql=true \
          --skip-wizard

      - name: Adding pg namespace
        shell: bash
        run: |
          ./bin/everestctl namespaces add pg-only -v \
          --operator.mongodb=false \
          --operator.postgresql=true \
          --operator.mysql=false \
          --skip-wizard

      - name: Get Everest admin password
        shell: bash
        run: |
          echo "EVEREST_ADMIN_PASSWORD=$(./bin/everestctl accounts initial-admin-password)" >> $GITHUB_ENV

      - name: Expose Everest API Server
        shell: bash
        run: |
          kubectl port-forward -n everest-system deployment/everest-server 8080:8080 &

      - name: Run Everest UI
        shell: bash
        run: |
          cd ui
          make init
          make build
          pnpm --filter "@percona/everest" dev &

      - name: Install Chromium for Playwright
        shell: bash
        run: |
          cd ui/apps/everest
          npx playwright install chromium

      - name: Run integration tests
        shell: bash
        env:
          EVEREST_BUCKETS_NAMESPACES_MAP: '[["bucket-1","everest-ui"],["bucket-2","psmdb-only"],["bucket-3","pxc-only"],["bucket-4","pg-only"],["bucket-5","everest-ui"]]'
          EVEREST_LOCATION_ACCESS_KEY: "minioadmin"
          EVEREST_LOCATION_SECRET_KEY: "minioadmin"
          EVEREST_LOCATION_REGION: "us-east-1"
          EVEREST_LOCATION_URL: "https://minio.minio.svc.cluster.local"
          CI_USER: "admin"
          CI_PASSWORD: "${{ env.EVEREST_ADMIN_PASSWORD }}"
          RBAC_USER: "rbac_user"
          RBAC_PASSWORD: "rbac-e2e-test"
          MONITORING_USER: "admin"
          MONITORING_PASSWORD: "admin"
        run: |
          cd ui
          pnpm --filter "@percona/everest" e2e

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          kubectl -n everest-system describe pods
          kubectl -n everest-monitoring describe pods
          kubectl -n everest-system logs deploy/everest-server
          kubectl -n pxc-only describe pods
          kubectl -n psmdb-only describe pods
          kubectl -n pg-only describe pods

      - name: Archive report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ui/apps/everest/.e2e/playwright-report/
          overwrite: true

