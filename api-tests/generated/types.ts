/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Everest UI Login
         * @description This API issues a new JWT token for logging in from the Everest API.
         *     The provided user must have the `login` capability.
         *
         */
        post: operations["createSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user permissions
         * @description This API returns a list of permissions for the user that is currently logged in.
         *
         *     *Example:*
         *     Assume the following RBAC policy, and users `alice` and `bob`:
         *     ```
         *     p, role:dev, namespaces, read, *
         *     p, role:dev, database-engines, *, *\/*
         *     p, role:dev, database-clusters, *, *\/*
         *     p, bob, database-clusters, *, *\/*
         *     g, alice, role:dev
         *     ```
         *     The API will return the following permissions for `alice`:
         *     ```
         *     {
         *       "permissions": [
         *         [
         *             "alice",
         *             "namespaces",
         *             "read",
         *             "*"
         *         ],
         *         [
         *             "alice",
         *             "database-engines",
         *             "*",
         *             "*\/*"
         *         ],
         *         [
         *             "alice",
         *             "database-clusters",
         *             "*",
         *             "*\/*"
         *         ]
         *       ]
         *     }
         *     ```
         *     And the following permissions for `bob`:
         *     ```
         *     {
         *       "permissions": [
         *         [
         *             "bob",
         *             "database-clusters",
         *             "*",
         *             "*\/*"
         *         ]
         *       ]
         *     }
         *     ```
         *
         */
        get: operations["getUserPermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Managed namespaces
         * @description This API returns a list of namespaces managed by Everest.
         *
         */
        get: operations["listNamespaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Version
         * @description This API returns the version of the Everest API server.
         *
         */
        get: operations["versionInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Settings
         * @description This API returns the settings of the Everest installation.
         */
        get: operations["getSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Cluster resources
         * @description This API gets the capacity and available resources of the Kubernetes cluster.
         *
         */
        get: operations["getKubernetesClusterResources"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cluster-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Cluster info
         * @description This API gets the cluster type and the storage classes available in the cluster.
         *
         */
        get: operations["getKubernetesClusterInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/database-clusters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List database clusters
         * @description This API lists all database clusters in the specified namespace.
         *
         */
        get: operations["listDatabaseClusters"];
        put?: never;
        /**
         * Create database cluster
         * @description This API creates a new database cluster in the specified namespace.
         *
         */
        post: operations["createDatabaseCluster"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/database-clusters/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get database cluster
         * @description This API gets the database cluster specified by the `name` and `namespace`.
         *
         */
        get: operations["getDatabaseCluster"];
        /**
         * Update database cluster
         * @description This API updates a database cluster specified by the `name` and `namespace`.
         *
         */
        put: operations["updateDatabaseCluster"];
        post?: never;
        /**
         * Delete database cluster
         * @description This API deletes the database cluster specified by the `name` and `namespace`.
         *
         */
        delete: operations["deleteDatabaseCluster"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/database-clusters/{cluster-name}/backups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List database cluster backups
         * @description This API lists all database cluster backups in the specified `namespace`.
         *
         */
        get: operations["listDatabaseClusterBackups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/database-clusters/{cluster-name}/restores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List database cluster restores
         * @description This API lists all database cluster restores for a database cluster specified by the `name` and `namespace`.
         *
         */
        get: operations["listDatabaseClusterRestores"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/database-clusters/{name}/credentials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get database cluster credentials
         * @description This API gets the credentials for the database cluster specified by the `name` and `namespace`.
         *
         */
        get: operations["getDatabaseClusterCredentials"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/database-clusters/{name}/pitr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the Point-in-Time recovery info
         * @description This API gets the Point-in-Time recovery info for the database cluster specified by the `name` and `namespace`.
         *
         */
        get: operations["getDatabaseClusterPitr"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/database-clusters/{name}/components": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get database cluster components
         * @description This API gets the various components of the database cluster specified by the `name` and `namespace`.
         *
         */
        get: operations["getDatabaseClusterComponents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/database-engines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List database engines
         * @description This API lists all database engines in the specified `namespace`.
         *
         */
        get: operations["listDatabaseEngines"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/database-engines/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get database engine
         * @description This API gets the database engine specified by the `name` and `namespace`.
         *
         */
        get: operations["getDatabaseEngine"];
        /**
         * Update database engine
         * @description This API updates the database engine specified by the `name` and `namespace`.
         *
         */
        put: operations["updateDatabaseEngine"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/database-engines/upgrade-plan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get upgrade plan
         * @description This API lists pending operator upgrades in the given namespace.
         *
         *     Additionally, it also returns a list of pending action items that need to be performed
         *     before and after upgrading a database operator.
         *
         *     Added in v1.1.0, it is recommended to use this API for operator upgrades.
         *     The older upgrade APIs are deprecated and will be removed in v1.2.0
         *
         */
        get: operations["getUpgradePlan"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/database-engines/upgrade-plan/approval": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upgrade database engine operators
         * @description This API upgrades all database engine operators in the specified namespace.
         *
         *     Added in v1.1.0, it is recommended to use this API for operator upgrades.
         *     The older upgrade APIs are deprecated and will be removed in v1.2.0
         *
         */
        post: operations["approveUpgradePlan"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/database-cluster-restores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create database cluster restore
         * @description This API creates a new database cluster restore in the specified `namespace`.
         *
         */
        post: operations["createDatabaseClusterRestore"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/database-cluster-restores/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get database cluster restore
         * @description This API gets the database cluster restore specified by the `name` and `namespace`.
         *
         */
        get: operations["getDatabaseClusterRestore"];
        /**
         * Update database cluster restore
         * @description This API updates the database cluster restore specified by the `name` and `namespace`.
         *
         */
        put: operations["updateDatabaseClusterRestore"];
        post?: never;
        /**
         * Delete database cluster restore
         * @description This API deletes the database cluster restore specified by the `name` and `namespace`.
         *
         */
        delete: operations["deleteDatabaseClusterRestore"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/database-cluster-backups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create database cluster backup
         * @description This API creates a new database cluster backup in the specified `namespace`.
         *
         */
        post: operations["createDatabaseClusterBackup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/database-cluster-backups/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get database cluster backup
         * @description This API gets the database cluster backup specified by the `name` and `namespace`.
         *
         */
        get: operations["getDatabaseClusterBackup"];
        put?: never;
        post?: never;
        /**
         * Delete database cluster backup
         * @description This API deletes the database cluster backup specified by the `name` and `namespace`.
         *
         */
        delete: operations["deleteDatabaseClusterBackup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/backup-storages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List backup storages
         * @description This API lists all backup storages.
         */
        get: operations["listBackupStorages"];
        put?: never;
        /**
         * Create backup storage
         * @description This API creates a new backup storage.
         *
         *     **Examples**:
         *       ```
         *       {
         *         "metadata": {
         *           "name": "s3-storage",
         *           "namespace": "everest",
         *         },
         *         "spec": {
         *           "type": "s3",
         *           "bucketName": "bucket1",
         *           "accessKey": "access_key",
         *           "secretKey": "secret_key",
         *           "region": "eu-central-1"
         *         },
         *       }
         *       ```
         *
         *       ```
         *       {
         *         "metadata": {
         *           "name": "azure-storage",
         *           "namespace": "everest",
         *         },
         *         "spec": {
         *           "type": "azure",
         *           "bucketName": "container1",
         *           "accessKey": "storage_account_name",
         *           "secretKey": "storage_account_key",
         *         },
         *       }
         *       ```
         *
         */
        post: operations["createBackupStorage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/backup-storages/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get backup storage
         * @description This API gets the backup storage speciciied by the `name` in the given `namespace`.
         */
        get: operations["getBackupStorage"];
        put?: never;
        post?: never;
        /**
         * Delete backup storage
         * @description This API deletes the backup storage specified by the `name`.
         */
        delete: operations["deleteBackupStorage"];
        options?: never;
        head?: never;
        /**
         * Update backup storage
         * @description This API updates the backup storage specified by the `name`. Only the specified fields will be updated.
         *
         */
        patch: operations["updateBackupStorage"];
        trace?: never;
    };
    "/namespaces/{namespace}/monitoring-instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List monitoring instances
         * @description This API lists all monitoring instances in a given namespace.
         */
        get: operations["listMonitoringInstances"];
        put?: never;
        /**
         * Create monitoring instance
         * @description This API creates a new monitoring instance.
         *
         *     A monitoring instance object requires `type` to be set.
         *     Based on the `type` the respective key with configuration needs to be set.
         *     Such as, if `type: pmm`, then `pmm` key needs to be provided with a configuration.
         *
         */
        post: operations["createMonitoringInstance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/namespaces/{namespace}/monitoring-instances/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get monitoring instance
         * @description This API gets the monitoring instance specified by the `name`.
         */
        get: operations["getMonitoringInstance"];
        put?: never;
        post?: never;
        /**
         * Delete monitoring instnace
         * @description This API deletes the monitoring instance specified by the `name`.
         */
        delete: operations["deleteMonitoringInstance"];
        options?: never;
        head?: never;
        /**
         * Update monitoring instance
         * @description This API updates the monitoring instance specified by the `name`.
         */
        patch: operations["updateMonitoringInstance"];
        trace?: never;
    };
    "/monitoring-instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List monitoring instances (Deprecated)
         * @deprecated
         * @description The use of this API has been discontinued and will be removed in Everest v1.3.0.
         *     Please use `GET /namespaces/{namespace}/monitoring-instances` instead to list monitoring instances.
         *
         */
        get: operations["listMonitoringInstances_v0"];
        put?: never;
        /**
         * Create monitoring instance (Deprecated)
         * @description The use of this API has been discontinued and will be removed in Everest v1.3.0.
         *     Please use `POST /namespaces/{namespace}/monitoring-instances` instead to create a new monitoring instance.
         *
         */
        post: operations["createMonitoringInstance_v0"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monitoring-instances/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get monitoring instance (Deprecated)
         * @deprecated
         * @description The use of this API has been discontinued and will be removed in Everest v1.3.0.
         *     Please use `GET /namespaces/{namespace}/monitoring-instances/{name}` instead to get a monitoring instance.
         *
         */
        get: operations["getMonitoringInstance_v0"];
        put?: never;
        post?: never;
        /**
         * Delete monitoring instnace (Deprecated)
         * @deprecated
         * @description The use of this API has been discontinued and will be removed in Everest v1.3.0.
         *     Please use `DELETE /namespaces/{namespace}/monitoring-instances/{name}` instead to delete a monitoring instance.
         *
         */
        delete: operations["deleteMonitoringInstance_v0"];
        options?: never;
        head?: never;
        /**
         * Update monitoring instance (Deprecated)
         * @deprecated
         * @description The use of this API has been discontinued and will be removed in Everest v1.3.0.
         *     Please use `PATCH /namespaces/{namespace}/monitoring-instances/{name}` instead to update a monitoring instance.
         *
         */
        patch: operations["updateMonitoringInstance_v0"];
        trace?: never;
    };
    "/backup-storages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List backup storages (Deprecated)
         * @deprecated
         * @description The use of this API has been discontinued and will be removed in Everest v1.3.0.
         *     Please use `GET /namespaces/{namespace}/backup-storages` instead to list backup storages.
         *
         */
        get: operations["listBackupStorages_v0"];
        put?: never;
        /**
         * Create backup storage (Deprecated)
         * @deprecated
         * @description The use of this API has been discontinued and will be removed in Everest v1.3.0.
         *     Please use `POST /namespaces/{namespace}/backup-storages` instead to create a new backup storage.
         *
         */
        post: operations["createBackupStorage_v0"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/backup-storages/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get backup storage (Deprecated)
         * @deprecated
         * @description The use of this API has been discontinued and will be removed in Everest v1.3.0.
         *     Please use `GET /namespaces/{namespace}/backup-storages/{name}` instead to get a backup storage.
         *
         */
        get: operations["getBackupStorage_v0"];
        put?: never;
        post?: never;
        /**
         * Delete backup storage (Deprecated)
         * @deprecated
         * @description The use of this API has been discontinued and will be removed in Everest v1.3.0.
         *     Please use `DELETE /namespaces/{namespace}/backup-storages/{name}` instead to delete a backup storage.
         *
         */
        delete: operations["deleteBackupStorage_v0"];
        options?: never;
        head?: never;
        /**
         * Update backup storage (Deprecated)
         * @deprecated
         * @description The use of this API has been discontinued and will be removed in Everest v1.3.0.
         *     Please use `PATCH /namespaces/{namespace}/backup-storages/{name}` instead to update a backup storage.
         *
         */
        patch: operations["updateBackupStorage_v0"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Error response */
        Error: {
            message?: string;
        };
        NamespaceList: string[];
        UserPermissions: {
            enabled: boolean;
            permissions?: string[][];
        };
        UserCredentials: {
            username?: string;
            password?: string;
        };
        /** @description Backup storage parameters */
        CreateBackupStorageParams: {
            /**
             * @description A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
             * @example aws-dev
             */
            name: string;
            description?: string;
            /** @enum {string} */
            type: "s3" | "azure";
            /** @description The cloud storage bucket/container name */
            bucketName: string;
            accessKey: string;
            secretKey: string;
            url?: string;
            region?: string;
            /**
             * @deprecated
             * @description List of namespaces allowed to use this backup storage
             */
            allowedNamespaces?: string[];
            /** @default true */
            verifyTLS: boolean;
            /** @default false */
            forcePathStyle: boolean;
        };
        /** @description Backup storage parameters */
        UpdateBackupStorageParams: {
            description?: string;
            /** @description The cloud storage bucket/container name */
            bucketName?: string;
            accessKey?: string;
            secretKey?: string;
            url?: string;
            region?: string;
            verifyTLS?: boolean;
            forcePathStyle?: boolean;
            /**
             * @deprecated
             * @description List of namespaces allowed to use this backup storage
             */
            allowedNamespaces?: string[];
        };
        /** @description Operator version checks for a single database */
        OperatorVersionCheckForDatabase: {
            /** @description Name of the database cluster */
            name?: string;
            message?: string;
            /**
             * @description Pending task for the database cluster
             * @enum {string}
             */
            pendingTask?: "restart";
        };
        /** @description Operator version check results */
        OperatorVersion: {
            /** @description The current operator version */
            currentVersion?: string;
            databases?: components["schemas"]["OperatorVersionCheckForDatabase"][];
        };
        /**
         * @deprecated
         * @description Operator upgrade preflight check results for a database
         */
        OperatorUpgradePreflightForDatabase: {
            /** @description Name of the database cluster */
            name?: string;
            message?: string;
            /**
             * @description Pending task for the database cluster
             * @enum {string}
             */
            pendingTask?: "ready" | "notReady" | "restart" | "upgradeEngine";
        };
        UpgradeTask: {
            /** @description Name of the database cluster */
            name?: string;
            message?: string;
            /**
             * @description Pending task for the database cluster
             * @enum {string}
             */
            pendingTask?: "ready" | "notReady" | "restart" | "upgradeEngine";
        };
        Upgrade: {
            /** @description Name of the operator */
            name?: string;
            /** @description The current operator version */
            currentVersion?: string;
            /** @description The next version of the operator to upgrade to.
             *      */
            targetVersion?: string;
        };
        /** @description Operators upgrade plan */
        UpgradePlan: {
            upgrades?: components["schemas"]["Upgrade"][];
            pendingActions?: components["schemas"]["UpgradeTask"][];
        };
        /**
         * @deprecated
         * @description Operator upgrade preflight check results
         */
        OperatorUpgradePreflight: {
            /** @description The current operator version */
            currentVersion?: string;
            databases?: components["schemas"]["OperatorUpgradePreflightForDatabase"][];
        };
        /** @description Backup storage information */
        BackupStorage: {
            /** @enum {string} */
            type: "s3" | "azure";
            namespace?: string;
            name: string;
            description?: string;
            bucketName: string;
            url?: string;
            region?: string;
            /** @default true */
            verifyTLS: boolean;
            /** @default false */
            forcePathStyle: boolean;
            /**
             * @deprecated
             * @description List of namespaces allowed to use this backup storage
             */
            allowedNamespaces?: string[];
        };
        BackupStoragesList: components["schemas"]["BackupStorage"][];
        /** @description Monitoring instance information */
        MonitoringInstanceBase: {
            /** @enum {string} */
            type?: "pmm";
            url?: string;
            /**
             * @deprecated
             * @description List of namespaces allowed to use this monitoring instance
             */
            allowedNamespaces?: string[];
            /** @description VerifyTLS is set to ensure TLS/SSL verification. */
            verifyTLS?: boolean;
        };
        /** @description Monitoring instance information */
        MonitoringInstanceBaseWithName: components["schemas"]["MonitoringInstanceBase"] & {
            /**
             * @description A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
             * @example pmm-instance
             */
            name?: string;
            namespace?: string;
        };
        MonitoringInstancePMM: {
            pmm?: {
                /** @example admin */
                user?: string;
                /** @example password */
                password?: string;
                /** @example apikey */
                apiKey?: string;
            };
        };
        /** @description Monitoring instance create information */
        MonitoringInstanceCreateParams: components["schemas"]["MonitoringInstanceBaseWithName"] & components["schemas"]["MonitoringInstancePMM"];
        /** @description Monitoring instance update information */
        MonitoringInstanceUpdateParams: components["schemas"]["MonitoringInstanceBase"] & components["schemas"]["MonitoringInstancePMM"];
        /** @description Monitoring instance information */
        MonitoringInstance: components["schemas"]["MonitoringInstanceBaseWithName"];
        MonitoringInstancesList: components["schemas"]["MonitoringInstance"][];
        /** @description kubernetes object */
        DatabaseClusterCredential: {
            /** @example root */
            username?: string;
            /** @example root */
            password?: string;
        };
        /** @description components related data */
        DatabaseClusterComponents: {
            status?: string;
            name?: string;
            type?: string;
            started?: string;
            restarts?: number;
            ready?: string;
            containers?: components["schemas"]["DatabaseClusterComponentContainer"][];
        }[];
        DatabaseClusterComponentContainer: {
            name?: string;
            started?: string;
            ready?: boolean;
            restarts?: number;
            status?: string;
        };
        /** @description point-in-time recovery related data */
        DatabaseClusterPitr: {
            /**
             * Format: date-time
             * @example 2023-12-31T23:59:59Z
             */
            earliestDate?: string;
            /**
             * Format: date-time
             * @example 2023-12-31T23:59:59Z
             */
            latestDate?: string;
            latestBackupName?: string;
            /** @description indicates if there are pitr logs gaps detected after this backup was taken */
            gaps?: boolean;
        };
        /** @description kubernetes cluster resources */
        KubernetesClusterResources: {
            capacity: {
                cpuMillis?: number;
                memoryBytes?: number;
                diskSize?: number;
            };
            available: {
                cpuMillis?: number;
                memoryBytes?: number;
                diskSize?: number;
            };
        };
        /** @description kubernetes cluster info */
        KubernetesClusterInfo: {
            clusterType: string;
            /** @example [
             *       "gp2",
             *       "gp3"
             *     ] */
            storageClassNames: string[];
        };
        /** @description Everest version info */
        Version: {
            projectName: string;
            version: string;
            fullCommit: string;
        };
        /** @description Everest global settings */
        Settings: {
            oidcConfig: components["schemas"]["OIDCConfig"];
        };
        /** @description Everest OIDC provider configuration */
        OIDCConfig: {
            /** @description OIDC application clientID */
            clientId: string;
            /** @description OIDC provider url */
            issuerURL: string;
        };
        /** @description DatabaseClusterList is an object that contains the list of the existing database clusters. */
        DatabaseClusterList: {
            /** @description APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /** @description Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            items?: components["schemas"]["DatabaseCluster"][];
            metadata?: Record<string, never>;
        };
        /** @description DatabaseEngineList is an object that contains the list of the existing database engines. */
        DatabaseEngineList: {
            /** @description APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /** @description Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            items?: components["schemas"]["DatabaseEngine"][];
            metadata?: Record<string, never>;
        };
        /** @description This no-op object is used to trigger the operator upgrade in a namespace.
         *      */
        UpgradePlanApproval: Record<string, never>;
        /**
         * @deprecated
         * @description Database engine operator upgrade parameters
         */
        DatabaseEngineOperatorUpgradeParams: {
            /**
             * @description The version to which the operator should be upgraded
             * @example 0.12.0
             */
            targetVersion: string;
        };
        /** @description DatabaseClusterRestoreList is an object that contains the list of the existing database cluster restores. */
        DatabaseClusterRestoreList: {
            /** @description APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /** @description Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            items?: components["schemas"]["DatabaseClusterRestore"][];
            metadata?: Record<string, never>;
        };
        /** @description DatabaseClusterBackupList is an object that contains the list of the existing database cluster backups. */
        DatabaseClusterBackupList: {
            /** @description APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /** @description Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            items?: components["schemas"]["DatabaseClusterBackup"][];
            metadata?: Record<string, never>;
        };
        /** @description sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir */
        SizeLimit: components["schemas"]["Integer"] | components["schemas"]["String"];
        Integer: number;
        String: string;
        /** @description DatabaseEngine is the Schema for the databaseengines API. */
        DatabaseEngine: {
            /** @description APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /** @description Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            metadata?: Record<string, never>;
            /** @description DatabaseEngineSpec is a spec for a database engine. */
            spec?: {
                allowedVersions?: string[];
                /** @description EngineType stands for the supported database engines. Right now it's only pxc and psmdb. However, it can be ps, pg and any other source. */
                type: string;
            };
            /** @description DatabaseEngineStatus defines the observed state of DatabaseEngine. */
            status?: {
                /** @description Versions struct represents available versions of database engine components. */
                availableVersions?: {
                    backup?: {
                        [key: string]: {
                            critical?: boolean;
                            imageHash?: string;
                            imagePath?: string;
                            status?: string;
                        };
                    };
                    engine?: {
                        [key: string]: {
                            critical?: boolean;
                            imageHash?: string;
                            imagePath?: string;
                            status?: string;
                        };
                    };
                    proxy?: {
                        [key: string]: {
                            [key: string]: {
                                critical?: boolean;
                                imageHash?: string;
                                imagePath?: string;
                                status?: string;
                            };
                        };
                    };
                    tools?: {
                        [key: string]: {
                            [key: string]: {
                                critical?: boolean;
                                imageHash?: string;
                                imagePath?: string;
                                status?: string;
                            };
                        };
                    };
                };
                /** @description OperatorUpgrade contains the status of the operator upgrade.
                 *     This is set only if the `everest.percona.com/upgrade-operator-to` annotation is present. */
                operatorUpgrade?: {
                    /** @description InstallPlanRef is a reference to the InstallPlan object created for the operator upgrade. */
                    installPlanRef?: {
                        /** @description Name of the referent.
                         *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                         *     TODO: Add other useful fields. apiVersion, kind, uid? */
                        name?: string;
                    };
                    message?: string;
                    /** @description UpgradePhase represents the phase of the operator upgrade. */
                    phase?: string;
                    /** Format: date-time */
                    startedAt?: string;
                    /** @description TargetVersion is the version to which the operator should be upgraded. */
                    targetVersion?: string;
                };
                operatorVersion?: string;
                pendingOperatorUpgrades?: {
                    /** @description InstallPlanRef is a reference to the InstallPlan object created for the operator upgrade. */
                    installPlanRef?: {
                        /** @description Name of the referent.
                         *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                         *     TODO: Add other useful fields. apiVersion, kind, uid? */
                        name?: string;
                    };
                    /** @description TargetVersion is the version to which the operator should be upgraded. */
                    targetVersion?: string;
                }[];
                /** @description EngineState represents state of engine in a k8s cluster. */
                status?: string;
            };
        };
        /** @description DatabaseCluster is the Schema for the databaseclusters API. */
        DatabaseCluster: {
            /** @description APIVersion defines the versioned schema of this representation of an object.
             *     Servers should convert recognized schemas to the latest internal value, and
             *     may reject unrecognized values.
             *     More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /** @description Kind is a string value representing the REST resource this object represents.
             *     Servers may infer this from the endpoint the client submits requests to.
             *     Cannot be updated.
             *     In CamelCase.
             *     More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            metadata?: Record<string, never>;
            /** @description DatabaseClusterSpec defines the desired state of DatabaseCluster. */
            spec?: {
                /** @description AllowUnsafeConfiguration field used to ensure that the user can create configurations unfit for production use. */
                allowUnsafeConfiguration?: boolean;
                /** @description Backup is the backup specification */
                backup?: {
                    /** @description Enabled is a flag to enable backups */
                    enabled: boolean;
                    /** @description PITR is the configuration of the point in time recovery */
                    pitr?: {
                        /** @description BackupStorageName is the name of the BackupStorage where the PITR is enabled */
                        backupStorageName?: string;
                        /** @description Enabled is a flag to enable PITR */
                        enabled: boolean;
                        /** @description UploadIntervalSec number of seconds between the binlogs uploads */
                        uploadIntervalSec?: number;
                    };
                    /** @description Schedules is a list of backup schedules */
                    schedules?: {
                        /** @description BackupStorageName is the name of the BackupStorage CR that defines the
                         *     storage location */
                        backupStorageName: string;
                        /** @description Enabled is a flag to enable the schedule */
                        enabled: boolean;
                        /** @description Name is the name of the schedule */
                        name: string;
                        /**
                         * Format: int32
                         * @description RetentionCopies is the number of backup copies to retain
                         */
                        retentionCopies?: number;
                        /** @description Schedule is the cron schedule */
                        schedule: string;
                    }[];
                };
                /** @description DataSource defines a data source for bootstraping a new cluster */
                dataSource?: {
                    /** @description BackupSource is the backup source to restore from */
                    backupSource?: {
                        /** @description BackupStorageName is the name of the BackupStorage used for backups. */
                        backupStorageName: string;
                        /** @description Path is the path to the backup file/directory. */
                        path: string;
                    };
                    /** @description DBClusterBackupName is the name of the DB cluster backup to restore from */
                    dbClusterBackupName?: string;
                    /** @description PITR is the point-in-time recovery configuration */
                    pitr?: {
                        /** @description Date is the UTC date to recover to. The accepted format: "2006-01-02T15:04:05Z". */
                        date?: string;
                        /**
                         * @description Type is the type of recovery.
                         * @default date
                         * @enum {string}
                         */
                        type: "date" | "latest";
                    };
                };
                /** @description Engine is the database engine specification */
                engine: {
                    /** @description Config is the engine configuration */
                    config?: string;
                    /** @description CRVersion is the desired version of the CR to use with the
                     *     underlying operator.
                     *     If unspecified, everest-operator will use the same version as the operator.
                     *
                     *
                     *     NOTE: Updating this property post installation may lead to a restart of the cluster. */
                    crVersion?: string;
                    /**
                     * Format: int32
                     * @description Replicas is the number of engine replicas
                     */
                    replicas?: number;
                    /** @description Resources are the resource limits for each engine replica.
                     *     If not set, resource limits are not imposed */
                    resources?: {
                        /** @description CPU is the CPU resource requirements */
                        cpu?: number | string;
                        /** @description Memory is the memory resource requirements */
                        memory?: number | string;
                    };
                    /** @description Storage is the engine storage configuration */
                    storage: {
                        /** @description Class is the storage class to use for the persistent volume claim */
                        class?: string;
                        /** @description Size is the size of the persistent volume claim */
                        size: number | string;
                    };
                    /**
                     * @description Type is the engine type
                     * @enum {string}
                     */
                    type: "pxc" | "postgresql" | "psmdb";
                    /** @description UserSecretsName is the name of the secret containing the user secrets */
                    userSecretsName?: string;
                    /** @description Version is the engine version */
                    version?: string;
                };
                /** @description Monitoring is the monitoring configuration */
                monitoring?: {
                    /** @description MonitoringConfigName is the name of a monitoringConfig CR. */
                    monitoringConfigName?: string;
                    /** @description Resources defines resource limitations for the monitoring. */
                    resources?: {
                        /** @description Claims lists the names of resources, defined in spec.resourceClaims,
                         *     that are used by this container.
                         *
                         *
                         *     This is an alpha field and requires enabling the
                         *     DynamicResourceAllocation feature gate.
                         *
                         *
                         *     This field is immutable. It can only be set for containers. */
                        claims?: {
                            /** @description Name must match the name of one entry in pod.spec.resourceClaims of
                             *     the Pod where this field is used. It makes that resource available
                             *     inside a container. */
                            name: string;
                        }[];
                        /** @description Limits describes the maximum amount of compute resources allowed.
                         *     More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                        limits?: {
                            [key: string]: number | string;
                        };
                        /** @description Requests describes the minimum amount of compute resources required.
                         *     If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
                         *     otherwise to an implementation-defined value. Requests cannot exceed Limits.
                         *     More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ */
                        requests?: {
                            [key: string]: number | string;
                        };
                    };
                };
                /** @description Paused is a flag to stop the cluster */
                paused?: boolean;
                /** @description Proxy is the proxy specification. If not set, an appropriate
                 *     proxy specification will be applied for the given engine. A
                 *     common use case for setting this field is to control the
                 *     external access to the database cluster. */
                proxy?: {
                    /** @description Config is the proxy configuration */
                    config?: string;
                    /** @description Expose is the proxy expose configuration */
                    expose?: {
                        /** @description IPSourceRanges is the list of IP source ranges (CIDR notation)
                         *     to allow access from. If not set, there is no limitations */
                        ipSourceRanges?: string[];
                        /**
                         * @description Type is the expose type, can be internal or external
                         * @default internal
                         * @enum {string}
                         */
                        type: "internal" | "external";
                    };
                    /**
                     * Format: int32
                     * @description Replicas is the number of proxy replicas
                     */
                    replicas?: number;
                    /** @description Resources are the resource limits for each proxy replica.
                     *     If not set, resource limits are not imposed */
                    resources?: {
                        /** @description CPU is the CPU resource requirements */
                        cpu?: number | string;
                        /** @description Memory is the memory resource requirements */
                        memory?: number | string;
                    };
                    /**
                     * @description Type is the proxy type
                     * @enum {string}
                     */
                    type?: "mongos" | "haproxy" | "proxysql" | "pgbouncer";
                };
                /** @description Sharding is the sharding configuration. PSMDB-only */
                sharding?: {
                    /** @description ConfigServer represents the sharding configuration server settings */
                    configServer: {
                        /**
                         * Format: int32
                         * @description Replicas is the amount of configServers
                         */
                        replicas: number;
                    };
                    /** @description Enabled defines if the sharding is enabled */
                    enabled: boolean;
                    /**
                     * Format: int32
                     * @description Shards defines the number of shards
                     */
                    shards: number;
                };
            };
            /** @description DatabaseClusterStatus defines the observed state of DatabaseCluster. */
            status?: {
                /** @description ActiveStorage is the storage used in cluster (psmdb only) */
                activeStorage?: string;
                /** @description CRVersion is the observed version of the CR used with the underlying operator. */
                crVersion?: string;
                /** @description Details provides full status of the upstream cluster as a plain text. */
                details?: string;
                /** @description Hostname is the hostname where the cluster can be reached */
                hostname?: string;
                /** @description Message is extra information about the cluster */
                message?: string;
                /**
                 * Format: int32
                 * @description Port is the port where the cluster can be reached
                 */
                port?: number;
                /**
                 * Format: int32
                 * @description Ready is the number of ready pods
                 */
                ready?: number;
                /** @description RecommendedCRVersion is the recommended version of the CR to use.
                 *     If set, the CR needs to be updated to this version before upgrading the operator.
                 *     If unset, the CR is already at the recommended version. */
                recommendedCRVersion?: string;
                /**
                 * Format: int32
                 * @description Size is the total number of pods
                 */
                size?: number;
                /** @description Status is the status of the cluster */
                status?: string;
            };
        };
        /** @description DatabaseClusterBackup is the Schema for the databaseclusterbackups API. */
        DatabaseClusterBackup: {
            /** @description APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /** @description Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            metadata?: Record<string, never>;
            /** @description DatabaseClusterBackupSpec defines the desired state of DatabaseClusterBackup. */
            spec?: {
                /** @description BackupStorageName is the name of the BackupStorage used for backups. */
                backupStorageName: string;
                /** @description DBClusterName is the original database cluster name. */
                dbClusterName: string;
            };
            /** @description DatabaseClusterBackupStatus defines the observed state of DatabaseClusterBackup. */
            status?: {
                /**
                 * Format: date-time
                 * @description Completed is the time when the job was completed.
                 */
                completed?: string;
                /**
                 * Format: date-time
                 * @description Created is the timestamp of the upstream backup's creation.
                 */
                created?: string;
                /** @description Destination is the full path to the backup. */
                destination?: string;
                /** @description Gaps identifies if there are gaps detected in the PITR logs */
                gaps: boolean;
                /**
                 * Format: date-time
                 * @description LatestRestorableTime is the latest time that can be used for PITR restore
                 */
                latestRestorableTime?: string;
                /** @description State is the DatabaseBackup state. */
                state?: string;
            };
        };
        /** @description DatabaseClusterRestore is the Schema for the databaseclusterrestores API. */
        DatabaseClusterRestore: {
            /** @description APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /** @description Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            metadata?: Record<string, never>;
            /** @description DatabaseClusterRestoreSpec defines the desired state of DatabaseClusterRestore. */
            spec?: {
                /** @description DataSource defines a data source for restoration. */
                dataSource: {
                    /** @description BackupSource is the backup source to restore from */
                    backupSource?: {
                        /** @description BackupStorageName is the name of the BackupStorage used for backups. */
                        backupStorageName: string;
                        /** @description Path is the path to the backup file/directory. */
                        path: string;
                    };
                    /** @description DBClusterBackupName is the name of the DB cluster backup to restore from */
                    dbClusterBackupName?: string;
                    /** @description PITR is the point-in-time recovery configuration */
                    pitr?: {
                        /** @description Date is the UTC date to recover to. The accepted format: "2006-01-02T15:04:05Z". */
                        date?: string;
                        /**
                         * @description Type is the type of recovery.
                         * @default date
                         * @enum {string}
                         */
                        type: "date" | "latest";
                    };
                };
                /** @description DBClusterName defines the cluster name to restore. */
                dbClusterName: string;
            };
            /** @description DatabaseClusterRestoreStatus defines the observed state of DatabaseClusterRestore. */
            status?: {
                /** Format: date-time */
                completed?: string;
                message?: string;
                /** @description RestoreState represents state of restoration. */
                state?: string;
            };
        };
        /** @description Status is a return value for calls that don't return other objects. */
        "io.k8s.apimachinery.pkg.apis.meta.v1.Status_v2": {
            /** @description APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /**
             * Format: int32
             * @description Suggested HTTP return code for this status, 0 if not set.
             */
            code?: number;
            /** @description Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type. */
            details?: components["schemas"]["io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails_v2"];
            /** @description Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            /** @description A human-readable description of the status of this operation. */
            message?: string;
            /** @description Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            metadata?: components["schemas"]["io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"];
            /** @description A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it. */
            reason?: string;
            /** @description Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status */
            status?: string;
        };
        /** @description ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}. */
        "io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta": {
            /** @description continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message. */
            continue?: string;
            /**
             * Format: int64
             * @description remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
             */
            remainingItemCount?: number;
            /** @description String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency */
            resourceVersion?: string;
            /** @description selfLink is a URL representing this object. Populated by the system. Read-only.
             *
             *     DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release. */
            selfLink?: string;
        };
        /** @description StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined. */
        "io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails_v2": {
            /** @description The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes. */
            causes?: components["schemas"]["io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"][];
            /** @description The group attribute of the resource associated with the status StatusReason. */
            group?: string;
            /** @description The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            /** @description The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described). */
            name?: string;
            /**
             * Format: int32
             * @description If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
             */
            retryAfterSeconds?: number;
            /** @description UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids */
            uid?: string;
        };
        /** @description StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered. */
        "io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause": {
            /** @description The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
             *
             *     Examples:
             *       "name" - the field "name" on the current resource
             *       "items[0].name" - the field "name" on the first array entry in "items" */
            field?: string;
            /** @description A human-readable description of the cause of the error.  This field may be presented as-is to a reader. */
            message?: string;
            /** @description A machine-readable description of the cause of the error. If this value is empty there is no information available. */
            reason?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    createSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The user credentials */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCredentials"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        token?: string;
                    };
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getUserPermissions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPermissions"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listNamespaces: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NamespaceList"];
                };
            };
        };
    };
    versionInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Version"];
                };
            };
        };
    };
    getSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Settings"];
                };
            };
        };
    };
    getKubernetesClusterResources: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KubernetesClusterResources"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getKubernetesClusterInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KubernetesClusterInfo"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listDatabaseClusters: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseClusterList"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createDatabaseCluster: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
            };
            cookie?: never;
        };
        /** @description The database cluster object to be created */
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatabaseCluster"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseCluster"];
                };
            };
            /** @description Created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseCluster"];
                };
            };
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseCluster"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getDatabaseCluster: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
                /** @description Name of the database cluster. Can be found under Metadata["name"] of the DatabaseCluster object. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseCluster"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateDatabaseCluster: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
                /** @description Name of the database cluster. Can be found under Metadata["name"] of the DatabaseCluster object. */
                name: string;
            };
            cookie?: never;
        };
        /** @description The database cluster object to be updated */
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatabaseCluster"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseCluster"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteDatabaseCluster: {
        parameters: {
            query?: {
                /** @description If set, remove the backed up data from storage */
                cleanupBackupStorage?: boolean;
            };
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
                /** @description Name of the database cluster. Can be found under Metadata["name"] of the DatabaseCluster object. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["io.k8s.apimachinery.pkg.apis.meta.v1.Status_v2"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listDatabaseClusterBackups: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
                /** @description Name of the database cluster. Can be found under Metadata["name"] of the DatabaseCluster object. */
                "cluster-name": string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseClusterBackupList"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listDatabaseClusterRestores: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
                /** @description Name of the database cluster. Can be found under Metadata["name"] of the DatabaseCluster object. */
                "cluster-name": string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseClusterRestoreList"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getDatabaseClusterCredentials: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
                /** @description Name of the database cluster. Can be found under Metadata["name"] of the DatabaseCluster object. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseClusterCredential"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getDatabaseClusterPitr: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
                /** @description Name of the database cluster. Can be found under Metadata["name"] of the DatabaseCluster object. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseClusterPitr"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getDatabaseClusterComponents: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
                /** @description Name of the database cluster. Can be found under Metadata["name"] of the DatabaseCluster object. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseClusterComponents"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listDatabaseEngines: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseEngineList"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getDatabaseEngine: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
                /** @description Name of the database engine */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseEngine"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateDatabaseEngine: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
                /** @description Name of the database engine */
                name: string;
            };
            cookie?: never;
        };
        /** @description The database cluster object to be updated */
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatabaseEngine"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseEngine"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getUpgradePlan: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpgradePlan"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    approveUpgradePlan: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
            };
            cookie?: never;
        };
        /** @description Request for upgrading the database engine operators */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpgradePlanApproval"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createDatabaseClusterRestore: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
            };
            cookie?: never;
        };
        /** @description The database cluster restore object to be created */
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatabaseClusterRestore"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseClusterRestore"];
                };
            };
            /** @description Created success */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseClusterRestore"];
                };
            };
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseClusterRestore"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getDatabaseClusterRestore: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
                /** @description Name of the database cluster restore. Can be found under Metadata["name"] of the DatabaseClusterRestore object. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseClusterRestore"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateDatabaseClusterRestore: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
                /** @description Name of the database cluster restore. Can be found under Metadata["name"] of the DatabaseClusterRestore object. */
                name: string;
            };
            cookie?: never;
        };
        /** @description The database cluster restore object to be updated */
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatabaseClusterRestore"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseClusterRestore"];
                };
            };
            /** @description Created successful */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseClusterRestore"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteDatabaseClusterRestore: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
                /** @description Name of the database cluster restore. Can be found under Metadata["name"] of the DatabaseClusterRestore object. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["io.k8s.apimachinery.pkg.apis.meta.v1.Status_v2"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createDatabaseClusterBackup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
            };
            cookie?: never;
        };
        /** @description The database cluster backup object to be created */
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatabaseClusterBackup"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseClusterBackup"];
                };
            };
            /** @description Created success */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseClusterBackup"];
                };
            };
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseClusterBackup"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getDatabaseClusterBackup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
                /** @description Name of the database cluster backup. Can be found under Metadata["name"] of the DatabaseClusterBackup object. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseClusterBackup"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteDatabaseClusterBackup: {
        parameters: {
            query?: {
                /** @description If set, remove the backed up data from storage */
                cleanupBackupStorage?: boolean;
            };
            header?: never;
            path: {
                /** @description Name of the namespace */
                namespace: string;
                /** @description Name of the database cluster backup. Can be found under Metadata["name"] of the DatabaseClusterBackup object. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["io.k8s.apimachinery.pkg.apis.meta.v1.Status_v2"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listBackupStorages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Namespace of the backup storage */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BackupStoragesList"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createBackupStorage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Namespace of the backup storage */
                namespace: string;
            };
            cookie?: never;
        };
        /** @description The backup storage object to be created */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBackupStorageParams"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BackupStorage"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getBackupStorage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the backup storage */
                name: string;
                /** @description Namespace of the backup storage */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BackupStorage"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteBackupStorage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the backup storage */
                name: string;
                /** @description Namespace of the backup storage */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateBackupStorage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the backup storage */
                name: string;
                /** @description Namespace of the backup storage */
                namespace: string;
            };
            cookie?: never;
        };
        /** @description The backup storage params. Only the specified fields will be updated. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBackupStorageParams"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BackupStorage"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listMonitoringInstances: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Namespace of the backup storage */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonitoringInstancesList"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createMonitoringInstance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Namespace of the backup storage */
                namespace: string;
            };
            cookie?: never;
        };
        /** @description The Monitoring instance object to be created */
        requestBody: {
            content: {
                "application/json": components["schemas"]["MonitoringInstanceCreateParams"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonitoringInstance"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getMonitoringInstance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the Monitoring instance */
                name: string;
                /** @description Namespace of the Monitoring instance */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonitoringInstance"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Monitoring instance not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteMonitoringInstance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the monitoring instance */
                name: string;
                /** @description Namespace of the Monitoring instance */
                namespace: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Monitoring instance not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateMonitoringInstance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the monitoring instance */
                name: string;
                /** @description Namespace of the Monitoring instance */
                namespace: string;
            };
            cookie?: never;
        };
        /** @description The monitoring instance object to be updated. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["MonitoringInstanceUpdateParams"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonitoringInstance"];
                };
            };
            /** @description Unsuccessful operation */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Monitoring instance not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listMonitoringInstances_v0: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    createMonitoringInstance_v0: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The Monitoring instance object to be created */
        requestBody: {
            content: {
                "application/json": components["schemas"]["MonitoringInstanceCreateParams"];
            };
        };
        responses: never;
    };
    getMonitoringInstance_v0: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the Monitoring instance */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    deleteMonitoringInstance_v0: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the monitoring instance */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    updateMonitoringInstance_v0: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the monitoring instance */
                name: string;
            };
            cookie?: never;
        };
        /** @description The monitoring instance object to be updated. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["MonitoringInstanceUpdateParams"];
            };
        };
        responses: never;
    };
    listBackupStorages_v0: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    createBackupStorage_v0: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The backup storage object to be created */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBackupStorageParams"];
            };
        };
        responses: never;
    };
    getBackupStorage_v0: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the backup storage */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    deleteBackupStorage_v0: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the backup storage */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    updateBackupStorage_v0: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the backup storage */
                name: string;
            };
            cookie?: never;
        };
        /** @description The backup storage params. Only the specified fields will be updated. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBackupStorageParams"];
            };
        };
        responses: never;
    };
}
