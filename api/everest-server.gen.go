// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for BackupStorageType.
const (
	BackupStorageTypeAzure BackupStorageType = "azure"
	BackupStorageTypeS3    BackupStorageType = "s3"
)

// Defines values for CreateBackupStorageParamsType.
const (
	CreateBackupStorageParamsTypeAzure CreateBackupStorageParamsType = "azure"
	CreateBackupStorageParamsTypeS3    CreateBackupStorageParamsType = "s3"
)

// Defines values for DatabaseClusterSpecDataSourcePitrType.
const (
	DatabaseClusterSpecDataSourcePitrTypeDate   DatabaseClusterSpecDataSourcePitrType = "date"
	DatabaseClusterSpecDataSourcePitrTypeLatest DatabaseClusterSpecDataSourcePitrType = "latest"
)

// Defines values for DatabaseClusterSpecEngineType.
const (
	DatabaseClusterSpecEngineTypePostgresql DatabaseClusterSpecEngineType = "postgresql"
	DatabaseClusterSpecEngineTypePsmdb      DatabaseClusterSpecEngineType = "psmdb"
	DatabaseClusterSpecEngineTypePxc        DatabaseClusterSpecEngineType = "pxc"
)

// Defines values for DatabaseClusterSpecProxyExposeType.
const (
	External DatabaseClusterSpecProxyExposeType = "external"
	Internal DatabaseClusterSpecProxyExposeType = "internal"
)

// Defines values for DatabaseClusterSpecProxyType.
const (
	Haproxy   DatabaseClusterSpecProxyType = "haproxy"
	Mongos    DatabaseClusterSpecProxyType = "mongos"
	Pgbouncer DatabaseClusterSpecProxyType = "pgbouncer"
	Proxysql  DatabaseClusterSpecProxyType = "proxysql"
)

// Defines values for DatabaseClusterStatusConditionsStatus.
const (
	False   DatabaseClusterStatusConditionsStatus = "False"
	True    DatabaseClusterStatusConditionsStatus = "True"
	Unknown DatabaseClusterStatusConditionsStatus = "Unknown"
)

// Defines values for DatabaseClusterRestoreSpecDataSourcePitrType.
const (
	DatabaseClusterRestoreSpecDataSourcePitrTypeDate   DatabaseClusterRestoreSpecDataSourcePitrType = "date"
	DatabaseClusterRestoreSpecDataSourcePitrTypeLatest DatabaseClusterRestoreSpecDataSourcePitrType = "latest"
)

// Defines values for MonitoringInstanceBaseType.
const (
	MonitoringInstanceBaseTypePmm MonitoringInstanceBaseType = "pmm"
)

// Defines values for MonitoringInstanceBaseWithNameType.
const (
	MonitoringInstanceBaseWithNameTypePmm MonitoringInstanceBaseWithNameType = "pmm"
)

// Defines values for MonitoringInstanceCreateParamsType.
const (
	MonitoringInstanceCreateParamsTypePmm MonitoringInstanceCreateParamsType = "pmm"
)

// Defines values for MonitoringInstanceUpdateParamsType.
const (
	MonitoringInstanceUpdateParamsTypePmm MonitoringInstanceUpdateParamsType = "pmm"
)

// Defines values for PodSchedulingPolicySpecEngineType.
const (
	PodSchedulingPolicySpecEngineTypePostgresql PodSchedulingPolicySpecEngineType = "postgresql"
	PodSchedulingPolicySpecEngineTypePsmdb      PodSchedulingPolicySpecEngineType = "psmdb"
	PodSchedulingPolicySpecEngineTypePxc        PodSchedulingPolicySpecEngineType = "pxc"
)

// Defines values for UpgradeTaskPendingTask.
const (
	NotReady      UpgradeTaskPendingTask = "notReady"
	Ready         UpgradeTaskPendingTask = "ready"
	Restart       UpgradeTaskPendingTask = "restart"
	UpgradeEngine UpgradeTaskPendingTask = "upgradeEngine"
)

// Defines values for ListPodSchedulingPolicyParamsEngineType.
const (
	Postgresql ListPodSchedulingPolicyParamsEngineType = "postgresql"
	Psmdb      ListPodSchedulingPolicyParamsEngineType = "psmdb"
	Pxc        ListPodSchedulingPolicyParamsEngineType = "pxc"
)

// BackupStorage Backup storage information
type BackupStorage struct {
	// AllowedNamespaces List of namespaces allowed to use this backup storage
	// Deprecated:
	AllowedNamespaces *[]string         `json:"allowedNamespaces,omitempty"`
	BucketName        string            `json:"bucketName"`
	Description       *string           `json:"description,omitempty"`
	ForcePathStyle    *bool             `json:"forcePathStyle,omitempty"`
	Name              string            `json:"name"`
	Namespace         string            `json:"namespace,omitempty"`
	Region            string            `json:"region,omitempty"`
	Type              BackupStorageType `json:"type"`
	Url               *string           `json:"url,omitempty"`
	VerifyTLS         *bool             `json:"verifyTLS,omitempty"`
}

// BackupStorageType defines model for BackupStorage.Type.
type BackupStorageType string

// BackupStoragesList defines model for BackupStoragesList.
type BackupStoragesList = []BackupStorage

// CreateBackupStorageParams Backup storage parameters
type CreateBackupStorageParams struct {
	AccessKey string `json:"accessKey"`

	// AllowedNamespaces List of namespaces allowed to use this backup storage
	// Deprecated:
	AllowedNamespaces *[]string `json:"allowedNamespaces,omitempty"`

	// BucketName The cloud storage bucket/container name
	BucketName     string  `json:"bucketName"`
	Description    *string `json:"description,omitempty"`
	ForcePathStyle *bool   `json:"forcePathStyle,omitempty"`

	// Name A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name      string                        `json:"name"`
	Region    string                        `json:"region,omitempty"`
	SecretKey string                        `json:"secretKey"`
	Type      CreateBackupStorageParamsType `json:"type"`
	Url       *string                       `json:"url,omitempty"`
	VerifyTLS *bool                         `json:"verifyTLS,omitempty"`
}

// CreateBackupStorageParamsType defines model for CreateBackupStorageParams.Type.
type CreateBackupStorageParamsType string

// DataImportJob DataImportJob is the schema for the dataimportjobs API.
type DataImportJob struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
	Spec     *struct {
		// Config Config defines the configuration for the data import job.
		// These options are specific to the DataImporter being used and must conform to
		// the schema defined in the DataImporter's .spec.config.openAPIV3Schema.
		Config *map[string]interface{} `json:"config,omitempty"`

		// DataImporterName DataImporterName is the data importer to use for the import.
		DataImporterName string `json:"dataImporterName"`

		// Source Source is the source of the data to import.
		Source struct {
			// Path Path is the path to the directory to import the data from.
			// This may be a path to a file or a directory, depending on the data importer.
			Path *string `json:"path,omitempty"`

			// S3 S3 contains the S3 information for the data import.
			S3 *struct {
				// AccessKeyId AccessKeyID allows specifying the S3 access key ID inline.
				// It is provided as a write-only input field for convenience.
				// When this field is set, a webhook writes this value in the Secret specified by `credentialsSecretName`
				// and empties this field.
				// This field is not stored in the API.
				AccessKeyId *string `json:"accessKeyId,omitempty"`

				// Bucket Bucket is the name of the S3 bucket.
				Bucket *string `json:"bucket,omitempty"`

				// CredentialsSecretName CredentialsSecreName is the reference to the secret containing the S3 credentials.
				// The Secret must contain the keys `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
				CredentialsSecretName string `json:"credentialsSecretName"`

				// EndpointURL EndpointURL is an endpoint URL of backup storage.
				EndpointURL *string `json:"endpointURL,omitempty"`

				// ForcePathStyle ForcePathStyle is set to use path-style URLs.
				// If unspecified, the default value is false.
				ForcePathStyle *bool `json:"forcePathStyle,omitempty"`

				// Region Region is the region of the S3 bucket.
				Region *string `json:"region,omitempty"`

				// SecretAccessKey SecretAccessKey allows specifying the S3 secret access key inline.
				// It is provided as a write-only input field for convenience.
				// When this field is set, a webhook writes this value in the Secret specified by `credentialsSecretName`
				// and empties this field.
				// This field is not stored in the API.
				SecretAccessKey *string `json:"secretAccessKey,omitempty"`

				// VerifyTLS VerifyTLS is set to ensure TLS/SSL verification.
				// If unspecified, the default value is true.
				VerifyTLS *bool `json:"verifyTLS,omitempty"`
			} `json:"s3,omitempty"`
		} `json:"source"`

		// TargetClusterName TargetClusterName is the reference to the target cluster.
		TargetClusterName string `json:"targetClusterName"`
	} `json:"spec,omitempty"`
	Status *struct {
		// CompletedAt CompletedAt is the time when the data import job completed successfully.
		CompletedAt *time.Time `json:"completedAt,omitempty"`

		// JobName JobName is the reference to the job that is running the data import.
		JobName *string `json:"jobName,omitempty"`

		// LastObservedGeneration LastObservedGeneration is the last observed generation of the data import job.
		LastObservedGeneration *int64 `json:"lastObservedGeneration,omitempty"`

		// Message Message is the message of the data import job.
		Message *string `json:"message,omitempty"`

		// StartedAt StartedAt is the time when the data import job started.
		StartedAt *time.Time `json:"startedAt,omitempty"`

		// State State is the current state of the data import job.
		State *string `json:"state,omitempty"`
	} `json:"status,omitempty"`
}

// DataImportJobList DataImportJobList is an object that contains the list of the existing data import jobs.
type DataImportJobList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string          `json:"apiVersion,omitempty"`
	Items      *[]DataImportJob `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// DataImporter DataImporter defines a reusable strategy for importing data into a DatabaseCluster.
type DataImporter struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec DataImporterSpec defines the specification of a DataImporter.
	Spec *struct {
		// ClusterPermissions ClusterPermissions defines the cluster-wide permissions required by the data importer.
		// These permissions are used to generate a ClusterRole for the data importer job.
		ClusterPermissions *[]struct {
			// ApiGroups APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of
			// the enumerated resources in any API group will be allowed. "" represents the core API group and "*" represents all API groups.
			ApiGroups *[]string `json:"apiGroups,omitempty"`

			// NonResourceURLs NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path
			// Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding.
			// Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
			NonResourceURLs *[]string `json:"nonResourceURLs,omitempty"`

			// ResourceNames ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
			ResourceNames *[]string `json:"resourceNames,omitempty"`

			// Resources Resources is a list of resources this rule applies to. '*' represents all resources.
			Resources *[]string `json:"resources,omitempty"`

			// Verbs Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.
			Verbs []string `json:"verbs"`
		} `json:"clusterPermissions,omitempty"`

		// Config Config contains additional configuration defined for the data importer.
		Config *struct {
			// OpenAPIV3Schema OpenAPIV3Schema is the OpenAPI v3 schema of the data importer.
			OpenAPIV3Schema *interface{} `json:"openAPIV3Schema,omitempty"`
		} `json:"config,omitempty"`

		// DatabaseClusterConstraints DatabaseClusterConstraints defines compatibility requirements and prerequisites that must be satisfied
		// by a DatabaseCluster before this data importer can be used with it. This allows the data importer to
		// express specific requirements about the database configuration needed for successful import operations,
		// such as required database fields, specific engine configurations, or other database properties.
		// When a DatabaseCluster references this data importer, the operator will validate the DatabaseCluster
		// against these constraints before proceeding with the import operation.
		DatabaseClusterConstraints *struct {
			// RequiredFields RequiredFields contains a list of fields that must be set in the DatabaseCluster spec.
			// Each key is a JSON path expressions that points to a field in the DatabaseCluster spec.
			// For example, ".spec.engine.type" or ".spec.dataSource.dataImport.config.someField".
			RequiredFields *[]string `json:"requiredFields,omitempty"`
		} `json:"databaseClusterConstraints,omitempty"`

		// Description Description is the description of the data importer.
		Description *string `json:"description,omitempty"`

		// DisplayName DisplayName is a human-readable name for the data importer.
		DisplayName *string `json:"displayName,omitempty"`

		// JobSpec JobSpec is the specification of the data importer job.
		JobSpec *struct {
			// Command Command is the command to run the data importer.
			Command *[]string `json:"command,omitempty"`

			// Image Image is the image of the data importer.
			Image *string `json:"image,omitempty"`
		} `json:"jobSpec,omitempty"`

		// Permissions Permissions defines the permissions required by the data importer.
		// These permissions are used to generate a Role for the data importer job.
		Permissions *[]struct {
			// ApiGroups APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of
			// the enumerated resources in any API group will be allowed. "" represents the core API group and "*" represents all API groups.
			ApiGroups *[]string `json:"apiGroups,omitempty"`

			// NonResourceURLs NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path
			// Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding.
			// Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
			NonResourceURLs *[]string `json:"nonResourceURLs,omitempty"`

			// ResourceNames ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
			ResourceNames *[]string `json:"resourceNames,omitempty"`

			// Resources Resources is a list of resources this rule applies to. '*' represents all resources.
			Resources *[]string `json:"resources,omitempty"`

			// Verbs Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.
			Verbs []string `json:"verbs"`
		} `json:"permissions,omitempty"`

		// SupportedEngines SupportedEngines is the list of engines that the data importer supports.
		SupportedEngines *[]string `json:"supportedEngines,omitempty"`
	} `json:"spec,omitempty"`
	Status *map[string]interface{} `json:"status,omitempty"`
}

// DataImporterList DataImporterList is an object that contains the list of the existing data importers.
type DataImporterList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string         `json:"apiVersion,omitempty"`
	Items      *[]DataImporter `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// DatabaseCluster DatabaseCluster is the Schema for the databaseclusters API.
type DatabaseCluster struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec DatabaseClusterSpec defines the desired state of DatabaseCluster.
	Spec *struct {
		// AllowUnsafeConfiguration AllowUnsafeConfiguration field used to ensure that the user can create configurations unfit for production use.
		//
		// Deprecated: AllowUnsafeConfiguration will not be supported in the future releases.
		AllowUnsafeConfiguration *bool `json:"allowUnsafeConfiguration,omitempty"`

		// Backup Backup is the backup specification
		Backup *struct {
			// Enabled Enabled is a flag to enable backups
			// Deprecated. Please use db.spec.backup.schedules[].enabled to control each schedule separately and db.spec.backup.pitr.enabled to control PITR.
			Enabled *bool `json:"enabled,omitempty"`

			// Pitr PITR is the configuration of the point in time recovery
			Pitr *struct {
				// BackupStorageName BackupStorageName is the name of the BackupStorage where the PITR is enabled
				// The BackupStorage must be created in the same namespace as the DatabaseCluster.
				BackupStorageName *string `json:"backupStorageName,omitempty"`

				// Enabled Enabled is a flag to enable PITR
				Enabled bool `json:"enabled"`

				// UploadIntervalSec UploadIntervalSec number of seconds between the binlogs uploads
				UploadIntervalSec *int `json:"uploadIntervalSec,omitempty"`
			} `json:"pitr,omitempty"`

			// Schedules Schedules is a list of backup schedules
			Schedules *[]struct {
				// BackupStorageName BackupStorageName is the name of the BackupStorage CR that defines the
				// storage location.
				// The BackupStorage must be created in the same namespace as the DatabaseCluster.
				BackupStorageName string `json:"backupStorageName"`

				// Enabled Enabled is a flag to enable the schedule
				Enabled bool `json:"enabled"`

				// Name Name is the name of the schedule
				Name string `json:"name"`

				// RetentionCopies RetentionCopies is the number of backup copies to retain
				RetentionCopies *int32 `json:"retentionCopies,omitempty"`

				// Schedule Schedule is the cron schedule
				Schedule string `json:"schedule"`
			} `json:"schedules,omitempty"`
		} `json:"backup,omitempty"`

		// DataSource DataSource defines a data source for bootstraping a new cluster
		DataSource *struct {
			// BackupSource BackupSource is the backup source to restore from
			BackupSource *struct {
				// BackupStorageName BackupStorageName is the name of the BackupStorage used for backups.
				// The BackupStorage must be created in the same namespace as the DatabaseCluster.
				BackupStorageName string `json:"backupStorageName"`

				// Path Path is the path to the backup file/directory.
				Path string `json:"path"`
			} `json:"backupSource,omitempty"`

			// DataImport DataImport allows importing data from an external backup source.
			DataImport *struct {
				// Config Config defines the configuration for the data import job.
				// These options are specific to the DataImporter being used and must conform to
				// the schema defined in the DataImporter's .spec.config.openAPIV3Schema.
				Config *map[string]interface{} `json:"config,omitempty"`

				// DataImporterName DataImporterName is the data importer to use for the import.
				DataImporterName string `json:"dataImporterName"`

				// Source Source is the source of the data to import.
				Source struct {
					// Path Path is the path to the directory to import the data from.
					// This may be a path to a file or a directory, depending on the data importer.
					Path *string `json:"path,omitempty"`

					// S3 S3 contains the S3 information for the data import.
					S3 *struct {
						// AccessKeyId AccessKeyID allows specifying the S3 access key ID inline.
						// It is provided as a write-only input field for convenience.
						// When this field is set, a webhook writes this value in the Secret specified by `credentialsSecretName`
						// and empties this field.
						// This field is not stored in the API.
						AccessKeyId *string `json:"accessKeyId,omitempty"`

						// Bucket Bucket is the name of the S3 bucket.
						Bucket *string `json:"bucket,omitempty"`

						// CredentialsSecretName CredentialsSecreName is the reference to the secret containing the S3 credentials.
						// The Secret must contain the keys `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
						CredentialsSecretName string `json:"credentialsSecretName"`

						// EndpointURL EndpointURL is an endpoint URL of backup storage.
						EndpointURL *string `json:"endpointURL,omitempty"`

						// ForcePathStyle ForcePathStyle is set to use path-style URLs.
						// If unspecified, the default value is false.
						ForcePathStyle *bool `json:"forcePathStyle,omitempty"`

						// Region Region is the region of the S3 bucket.
						Region *string `json:"region,omitempty"`

						// SecretAccessKey SecretAccessKey allows specifying the S3 secret access key inline.
						// It is provided as a write-only input field for convenience.
						// When this field is set, a webhook writes this value in the Secret specified by `credentialsSecretName`
						// and empties this field.
						// This field is not stored in the API.
						SecretAccessKey *string `json:"secretAccessKey,omitempty"`

						// VerifyTLS VerifyTLS is set to ensure TLS/SSL verification.
						// If unspecified, the default value is true.
						VerifyTLS *bool `json:"verifyTLS,omitempty"`
					} `json:"s3,omitempty"`
				} `json:"source"`
			} `json:"dataImport,omitempty"`

			// DbClusterBackupName DBClusterBackupName is the name of the DB cluster backup to restore from
			DbClusterBackupName *string `json:"dbClusterBackupName,omitempty"`

			// Pitr PITR is the point-in-time recovery configuration
			Pitr *struct {
				// Date Date is the UTC date to recover to. The accepted format: "2006-01-02T15:04:05Z".
				Date *string `json:"date,omitempty"`

				// Type Type is the type of recovery.
				Type *DatabaseClusterSpecDataSourcePitrType `json:"type,omitempty"`
			} `json:"pitr,omitempty"`
		} `json:"dataSource,omitempty"`

		// Engine Engine is the database engine specification
		Engine struct {
			// Config Config is the engine configuration
			Config *string `json:"config,omitempty"`

			// CrVersion CRVersion is the desired version of the CR to use with the
			// underlying operator.
			// If unspecified, everest-operator will use the same version as the operator.
			//
			// NOTE: Updating this property post installation may lead to a restart of the cluster.
			CrVersion *string `json:"crVersion,omitempty"`

			// Replicas Replicas is the number of engine replicas
			Replicas *int32 `json:"replicas,omitempty"`

			// Resources Resources are the resource limits for each engine replica.
			// If not set, resource limits are not imposed
			Resources *struct {
				// Cpu CPU is the CPU resource requirements
				Cpu *DatabaseCluster_Spec_Engine_Resources_Cpu `json:"cpu,omitempty"`

				// Memory Memory is the memory resource requirements
				Memory *DatabaseCluster_Spec_Engine_Resources_Memory `json:"memory,omitempty"`
			} `json:"resources,omitempty"`

			// Storage Storage is the engine storage configuration
			Storage struct {
				// Class Class is the storage class to use for the persistent volume claim
				Class *string `json:"class,omitempty"`

				// Size Size is the size of the persistent volume claim
				Size DatabaseCluster_Spec_Engine_Storage_Size `json:"size"`
			} `json:"storage"`

			// Type Type is the engine type
			Type DatabaseClusterSpecEngineType `json:"type"`

			// UserSecretsName UserSecretsName is the name of the secret containing the user secrets
			UserSecretsName *string `json:"userSecretsName,omitempty"`

			// Version Version is the engine version
			Version *string `json:"version,omitempty"`
		} `json:"engine"`

		// Monitoring Monitoring is the monitoring configuration
		Monitoring *struct {
			// MonitoringConfigName MonitoringConfigName is the name of a monitoringConfig CR.
			// The MonitoringConfig must be created in the same namespace as the DatabaseCluster.
			MonitoringConfigName *string `json:"monitoringConfigName,omitempty"`

			// Resources Resources defines resource limitations for the monitoring.
			Resources *struct {
				// Claims Claims lists the names of resources, defined in spec.resourceClaims,
				// that are used by this container.
				//
				// This is an alpha field and requires enabling the
				// DynamicResourceAllocation feature gate.
				//
				// This field is immutable. It can only be set for containers.
				Claims *[]struct {
					// Name Name must match the name of one entry in pod.spec.resourceClaims of
					// the Pod where this field is used. It makes that resource available
					// inside a container.
					Name string `json:"name"`

					// Request Request is the name chosen for a request in the referenced claim.
					// If empty, everything from the claim is made available, otherwise
					// only the result of this request.
					Request *string `json:"request,omitempty"`
				} `json:"claims,omitempty"`

				// Limits Limits describes the maximum amount of compute resources allowed.
				// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
				Limits *map[string]DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties `json:"limits,omitempty"`

				// Requests Requests describes the minimum amount of compute resources required.
				// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
				// otherwise to an implementation-defined value. Requests cannot exceed Limits.
				// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
				Requests *map[string]DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties `json:"requests,omitempty"`
			} `json:"resources,omitempty"`
		} `json:"monitoring,omitempty"`

		// Paused Paused is a flag to stop the cluster
		Paused *bool `json:"paused,omitempty"`

		// PodSchedulingPolicyName PodSchedulingPolicyName is the name of the PodSchedulingPolicy CR that defines rules for DB cluster pods allocation across the cluster.
		PodSchedulingPolicyName *string `json:"podSchedulingPolicyName,omitempty"`

		// Proxy Proxy is the proxy specification. If not set, an appropriate
		// proxy specification will be applied for the given engine. A
		// common use case for setting this field is to control the
		// external access to the database cluster.
		Proxy *struct {
			// Config Config is the proxy configuration
			Config *string `json:"config,omitempty"`

			// Expose Expose is the proxy expose configuration
			Expose *struct {
				// IpSourceRanges IPSourceRanges is the list of IP source ranges (CIDR notation)
				// to allow access from. If not set, there is no limitations
				IpSourceRanges *[]string `json:"ipSourceRanges,omitempty"`

				// Type Type is the expose type, can be internal or external
				Type *DatabaseClusterSpecProxyExposeType `json:"type,omitempty"`
			} `json:"expose,omitempty"`

			// Replicas Replicas is the number of proxy replicas
			Replicas *int32 `json:"replicas,omitempty"`

			// Resources Resources are the resource limits for each proxy replica.
			// If not set, resource limits are not imposed
			Resources *struct {
				// Cpu CPU is the CPU resource requirements
				Cpu *DatabaseCluster_Spec_Proxy_Resources_Cpu `json:"cpu,omitempty"`

				// Memory Memory is the memory resource requirements
				Memory *DatabaseCluster_Spec_Proxy_Resources_Memory `json:"memory,omitempty"`
			} `json:"resources,omitempty"`

			// Type Type is the proxy type
			Type *DatabaseClusterSpecProxyType `json:"type,omitempty"`
		} `json:"proxy,omitempty"`

		// Sharding Sharding is the sharding configuration. PSMDB-only
		Sharding *struct {
			// ConfigServer ConfigServer represents the sharding configuration server settings
			ConfigServer struct {
				// Replicas Replicas is the amount of configServers
				Replicas int32 `json:"replicas"`
			} `json:"configServer"`

			// Enabled Enabled defines if the sharding is enabled
			Enabled bool `json:"enabled"`

			// Shards Shards defines the number of shards
			Shards int32 `json:"shards"`
		} `json:"sharding,omitempty"`
	} `json:"spec,omitempty"`

	// Status DatabaseClusterStatus defines the observed state of DatabaseCluster.
	Status *struct {
		// ActiveStorage ActiveStorage is the storage used in cluster (psmdb only)
		ActiveStorage *string `json:"activeStorage,omitempty"`

		// Conditions Conditions contains the observed conditions of the DatabaseCluster.
		Conditions *[]struct {
			// LastTransitionTime lastTransitionTime is the last time the condition transitioned from one status to another.
			// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
			LastTransitionTime time.Time `json:"lastTransitionTime"`

			// Message message is a human readable message indicating details about the transition.
			// This may be an empty string.
			Message string `json:"message"`

			// ObservedGeneration observedGeneration represents the .metadata.generation that the condition was set based upon.
			// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
			// with respect to the current state of the instance.
			ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

			// Reason reason contains a programmatic identifier indicating the reason for the condition's last transition.
			// Producers of specific condition types may define expected values and meanings for this field,
			// and whether the values are considered a guaranteed API.
			// The value should be a CamelCase string.
			// This field may not be empty.
			Reason string `json:"reason"`

			// Status status of the condition, one of True, False, Unknown.
			Status DatabaseClusterStatusConditionsStatus `json:"status"`

			// Type type of condition in CamelCase or in foo.example.com/CamelCase.
			Type string `json:"type"`
		} `json:"conditions,omitempty"`

		// CrVersion CRVersion is the observed version of the CR used with the underlying operator.
		CrVersion *string `json:"crVersion,omitempty"`

		// DataImportJobName DataImportJobName refers to the DataImportJob that is used to import data into the cluster.
		// This is set only when .spec.dataSource.dataImport is set.
		DataImportJobName *string `json:"dataImportJobName,omitempty"`

		// Details Details provides full status of the upstream cluster as a plain text.
		Details *string `json:"details,omitempty"`

		// Hostname Hostname is the hostname where the cluster can be reached
		Hostname *string `json:"hostname,omitempty"`

		// Message Message is extra information about the cluster
		Message *string `json:"message,omitempty"`

		// ObservedGeneration ObservedGeneration is the most recent generation observed for this DatabaseCluster.
		ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

		// Port Port is the port where the cluster can be reached
		Port *int32 `json:"port,omitempty"`

		// Ready Ready is the number of ready pods
		Ready *int32 `json:"ready,omitempty"`

		// RecommendedCRVersion RecommendedCRVersion is the recommended version of the CR to use.
		// If set, the CR needs to be updated to this version before upgrading the operator.
		// If unset, the CR is already at the recommended version.
		RecommendedCRVersion *string `json:"recommendedCRVersion,omitempty"`

		// Size Size is the total number of pods
		Size *int32 `json:"size,omitempty"`

		// Status Status is the status of the cluster
		Status *string `json:"status,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseClusterSpecDataSourcePitrType Type is the type of recovery.
type DatabaseClusterSpecDataSourcePitrType string

// DatabaseClusterSpecEngineResourcesCpu0 defines model for .
type DatabaseClusterSpecEngineResourcesCpu0 = int

// DatabaseClusterSpecEngineResourcesCpu1 defines model for .
type DatabaseClusterSpecEngineResourcesCpu1 = string

// DatabaseCluster_Spec_Engine_Resources_Cpu CPU is the CPU resource requirements
type DatabaseCluster_Spec_Engine_Resources_Cpu struct {
	union json.RawMessage
}

// DatabaseClusterSpecEngineResourcesMemory0 defines model for .
type DatabaseClusterSpecEngineResourcesMemory0 = int

// DatabaseClusterSpecEngineResourcesMemory1 defines model for .
type DatabaseClusterSpecEngineResourcesMemory1 = string

// DatabaseCluster_Spec_Engine_Resources_Memory Memory is the memory resource requirements
type DatabaseCluster_Spec_Engine_Resources_Memory struct {
	union json.RawMessage
}

// DatabaseClusterSpecEngineStorageSize0 defines model for .
type DatabaseClusterSpecEngineStorageSize0 = int

// DatabaseClusterSpecEngineStorageSize1 defines model for .
type DatabaseClusterSpecEngineStorageSize1 = string

// DatabaseCluster_Spec_Engine_Storage_Size Size is the size of the persistent volume claim
type DatabaseCluster_Spec_Engine_Storage_Size struct {
	union json.RawMessage
}

// DatabaseClusterSpecEngineType Type is the engine type
type DatabaseClusterSpecEngineType string

// DatabaseClusterSpecMonitoringResourcesLimits0 defines model for .
type DatabaseClusterSpecMonitoringResourcesLimits0 = int

// DatabaseClusterSpecMonitoringResourcesLimits1 defines model for .
type DatabaseClusterSpecMonitoringResourcesLimits1 = string

// DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties defines model for DatabaseCluster.Spec.Monitoring.Resources.Limits.AdditionalProperties.
type DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties struct {
	union json.RawMessage
}

// DatabaseClusterSpecMonitoringResourcesRequests0 defines model for .
type DatabaseClusterSpecMonitoringResourcesRequests0 = int

// DatabaseClusterSpecMonitoringResourcesRequests1 defines model for .
type DatabaseClusterSpecMonitoringResourcesRequests1 = string

// DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties defines model for DatabaseCluster.Spec.Monitoring.Resources.Requests.AdditionalProperties.
type DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties struct {
	union json.RawMessage
}

// DatabaseClusterSpecProxyExposeType Type is the expose type, can be internal or external
type DatabaseClusterSpecProxyExposeType string

// DatabaseClusterSpecProxyResourcesCpu0 defines model for .
type DatabaseClusterSpecProxyResourcesCpu0 = int

// DatabaseClusterSpecProxyResourcesCpu1 defines model for .
type DatabaseClusterSpecProxyResourcesCpu1 = string

// DatabaseCluster_Spec_Proxy_Resources_Cpu CPU is the CPU resource requirements
type DatabaseCluster_Spec_Proxy_Resources_Cpu struct {
	union json.RawMessage
}

// DatabaseClusterSpecProxyResourcesMemory0 defines model for .
type DatabaseClusterSpecProxyResourcesMemory0 = int

// DatabaseClusterSpecProxyResourcesMemory1 defines model for .
type DatabaseClusterSpecProxyResourcesMemory1 = string

// DatabaseCluster_Spec_Proxy_Resources_Memory Memory is the memory resource requirements
type DatabaseCluster_Spec_Proxy_Resources_Memory struct {
	union json.RawMessage
}

// DatabaseClusterSpecProxyType Type is the proxy type
type DatabaseClusterSpecProxyType string

// DatabaseClusterStatusConditionsStatus status of the condition, one of True, False, Unknown.
type DatabaseClusterStatusConditionsStatus string

// DatabaseClusterBackup DatabaseClusterBackup is the Schema for the databaseclusterbackups API.
type DatabaseClusterBackup struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec DatabaseClusterBackupSpec defines the desired state of DatabaseClusterBackup.
	Spec *struct {
		// BackupStorageName BackupStorageName is the name of the BackupStorage used for backups.
		BackupStorageName string `json:"backupStorageName"`

		// DbClusterName DBClusterName is the original database cluster name.
		DbClusterName string `json:"dbClusterName"`
	} `json:"spec,omitempty"`

	// Status DatabaseClusterBackupStatus defines the observed state of DatabaseClusterBackup.
	Status *struct {
		// Completed Completed is the time when the job was completed.
		Completed *time.Time `json:"completed,omitempty"`

		// Created Created is the timestamp of the upstream backup's creation.
		Created *time.Time `json:"created,omitempty"`

		// Destination Destination is the full path to the backup.
		Destination *string `json:"destination,omitempty"`

		// Gaps Gaps identifies if there are gaps detected in the PITR logs
		Gaps bool `json:"gaps"`

		// LatestRestorableTime LatestRestorableTime is the latest time that can be used for PITR restore
		LatestRestorableTime *time.Time `json:"latestRestorableTime,omitempty"`

		// State State is the DatabaseBackup state.
		State *string `json:"state,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseClusterBackupList DatabaseClusterBackupList is an object that contains the list of the existing database cluster backups.
type DatabaseClusterBackupList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string                  `json:"apiVersion,omitempty"`
	Items      *[]DatabaseClusterBackup `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// DatabaseClusterComponentContainer defines model for DatabaseClusterComponentContainer.
type DatabaseClusterComponentContainer struct {
	Name     *string `json:"name,omitempty"`
	Ready    *bool   `json:"ready,omitempty"`
	Restarts *int    `json:"restarts,omitempty"`
	Started  *string `json:"started,omitempty"`
	Status   *string `json:"status,omitempty"`
}

// DatabaseClusterComponents components related data
type DatabaseClusterComponents = []DatabaseClusterComponent

// DatabaseClusterComponent defines model for .
type DatabaseClusterComponent struct {
	Containers *[]DatabaseClusterComponentContainer `json:"containers,omitempty"`
	Name       *string                              `json:"name,omitempty"`
	Ready      *string                              `json:"ready,omitempty"`
	Restarts   *int                                 `json:"restarts,omitempty"`
	Started    *string                              `json:"started,omitempty"`
	Status     *string                              `json:"status,omitempty"`
	Type       *string                              `json:"type,omitempty"`
}

// DatabaseClusterCredential kubernetes object
type DatabaseClusterCredential struct {
	ConnectionUrl *string `json:"connectionUrl,omitempty"`
	Password      *string `json:"password,omitempty"`
	Username      *string `json:"username,omitempty"`
}

// DatabaseClusterList DatabaseClusterList is an object that contains the list of the existing database clusters.
type DatabaseClusterList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string            `json:"apiVersion,omitempty"`
	Items      *[]DatabaseCluster `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// DatabaseClusterPitr point-in-time recovery related data
type DatabaseClusterPitr struct {
	EarliestDate *time.Time `json:"earliestDate,omitempty"`

	// Gaps indicates if there are pitr logs gaps detected after this backup was taken
	Gaps             *bool      `json:"gaps,omitempty"`
	LatestBackupName *string    `json:"latestBackupName,omitempty"`
	LatestDate       *time.Time `json:"latestDate,omitempty"`
}

// DatabaseClusterRestore DatabaseClusterRestore is the Schema for the databaseclusterrestores API.
type DatabaseClusterRestore struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec DatabaseClusterRestoreSpec defines the desired state of DatabaseClusterRestore.
	Spec *struct {
		// DataSource DataSource defines a data source for restoration.
		DataSource struct {
			// BackupSource BackupSource is the backup source to restore from
			BackupSource *struct {
				// BackupStorageName BackupStorageName is the name of the BackupStorage used for backups.
				BackupStorageName string `json:"backupStorageName"`

				// Path Path is the path to the backup file/directory.
				Path string `json:"path"`
			} `json:"backupSource,omitempty"`

			// DbClusterBackupName DBClusterBackupName is the name of the DB cluster backup to restore from
			DbClusterBackupName *string `json:"dbClusterBackupName,omitempty"`

			// Pitr PITR is the point-in-time recovery configuration
			Pitr *struct {
				// Date Date is the UTC date to recover to. The accepted format: "2006-01-02T15:04:05Z".
				Date *string `json:"date,omitempty"`

				// Type Type is the type of recovery.
				Type *DatabaseClusterRestoreSpecDataSourcePitrType `json:"type,omitempty"`
			} `json:"pitr,omitempty"`
		} `json:"dataSource"`

		// DbClusterName DBClusterName defines the cluster name to restore.
		DbClusterName string `json:"dbClusterName"`
	} `json:"spec,omitempty"`

	// Status DatabaseClusterRestoreStatus defines the observed state of DatabaseClusterRestore.
	Status *struct {
		Completed *time.Time `json:"completed,omitempty"`
		Message   *string    `json:"message,omitempty"`

		// State RestoreState represents state of restoration.
		State *string `json:"state,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseClusterRestoreSpecDataSourcePitrType Type is the type of recovery.
type DatabaseClusterRestoreSpecDataSourcePitrType string

// DatabaseClusterRestoreList DatabaseClusterRestoreList is an object that contains the list of the existing database cluster restores.
type DatabaseClusterRestoreList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string                   `json:"apiVersion,omitempty"`
	Items      *[]DatabaseClusterRestore `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// DatabaseEngine DatabaseEngine is the Schema for the databaseengines API.
type DatabaseEngine struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec DatabaseEngineSpec is a spec for a database engine.
	Spec *struct {
		AllowedVersions *[]string `json:"allowedVersions,omitempty"`

		// SecretKeys SecretKeys contains the definition of the various Secrets that
		// the given DBEngine supports.
		// This information acts like metadata for the Everest UI to guide the users
		// in filling out the correct Secret keys for their clusters.
		SecretKeys *struct {
			// User User secret keys are used to store the details of the users.
			User *[]struct {
				// Description Description is a human-readable description of the Secret key.
				Description *string `json:"description,omitempty"`

				// Name Name is the name of the Secret key.
				Name *string `json:"name,omitempty"`
			} `json:"user,omitempty"`
		} `json:"secretKeys,omitempty"`

		// Type EngineType stands for the supported database engines. Right now it's only pxc
		// and psmdb. However, it can be ps, pg and any other source.
		Type string `json:"type"`
	} `json:"spec,omitempty"`

	// Status DatabaseEngineStatus defines the observed state of DatabaseEngine.
	Status *struct {
		// AvailableVersions Versions struct represents available versions of database engine components.
		AvailableVersions *struct {
			// Backup ComponentsMap is a map of database engine components.
			Backup *map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`

				// Status ComponentStatus represents status of the database engine component.
				Status *string `json:"status,omitempty"`
			} `json:"backup,omitempty"`

			// Engine ComponentsMap is a map of database engine components.
			Engine *map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`

				// Status ComponentStatus represents status of the database engine component.
				Status *string `json:"status,omitempty"`
			} `json:"engine,omitempty"`
			Proxy *map[string]map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`

				// Status ComponentStatus represents status of the database engine component.
				Status *string `json:"status,omitempty"`
			} `json:"proxy,omitempty"`
			Tools *map[string]map[string]struct {
				Critical  *bool   `json:"critical,omitempty"`
				ImageHash *string `json:"imageHash,omitempty"`
				ImagePath *string `json:"imagePath,omitempty"`

				// Status ComponentStatus represents status of the database engine component.
				Status *string `json:"status,omitempty"`
			} `json:"tools,omitempty"`
		} `json:"availableVersions,omitempty"`

		// OperatorUpgrade OperatorUpgrade contains the status of the operator upgrade.
		OperatorUpgrade *struct {
			// InstallPlanRef InstallPlanRef is a reference to the InstallPlan object created for the operator upgrade.
			//
			// We do not recommended approving this InstallPlan directly from the Kubernetes API.
			// This is because this InstallPlan may also upgrade other operators in the namespace and that
			// can have unintended consequences.
			// This behaviour is not a bug from Everest, but an unfortunate limitation of OLM.
			// We suggest using the Everest API/UI to handle operator upgrades, which will perform a series
			// of checks and safely upgrade all operators in the namespace.
			InstallPlanRef *struct {
				// Name Name of the referent.
				// This field is effectively required, but due to backwards compatibility is
				// allowed to be empty. Instances of this type with an empty value here are
				// almost certainly wrong.
				// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
				Name *string `json:"name,omitempty"`
			} `json:"installPlanRef,omitempty"`
			Message *string `json:"message,omitempty"`

			// Phase UpgradePhase represents the phase of the operator upgrade.
			Phase     *string    `json:"phase,omitempty"`
			StartedAt *time.Time `json:"startedAt,omitempty"`

			// TargetVersion TargetVersion is the version to which the operator should be upgraded.
			TargetVersion *string `json:"targetVersion,omitempty"`
		} `json:"operatorUpgrade,omitempty"`
		OperatorVersion         *string `json:"operatorVersion,omitempty"`
		PendingOperatorUpgrades *[]struct {
			// InstallPlanRef InstallPlanRef is a reference to the InstallPlan object created for the operator upgrade.
			//
			// We do not recommended approving this InstallPlan directly from the Kubernetes API.
			// This is because this InstallPlan may also upgrade other operators in the namespace and that
			// can have unintended consequences.
			// This behaviour is not a bug from Everest, but an unfortunate limitation of OLM.
			// We suggest using the Everest API/UI to handle operator upgrades, which will perform a series
			// of checks and safely upgrade all operators in the namespace.
			InstallPlanRef *struct {
				// Name Name of the referent.
				// This field is effectively required, but due to backwards compatibility is
				// allowed to be empty. Instances of this type with an empty value here are
				// almost certainly wrong.
				// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
				Name *string `json:"name,omitempty"`
			} `json:"installPlanRef,omitempty"`

			// TargetVersion TargetVersion is the version to which the operator should be upgraded.
			TargetVersion *string `json:"targetVersion,omitempty"`
		} `json:"pendingOperatorUpgrades,omitempty"`

		// Status EngineState represents state of engine in a k8s cluster.
		Status *string `json:"status,omitempty"`
	} `json:"status,omitempty"`
}

// DatabaseEngineList DatabaseEngineList is an object that contains the list of the existing database engines.
type DatabaseEngineList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string           `json:"apiVersion,omitempty"`
	Items      *[]DatabaseEngine `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// Error Error response
type Error struct {
	Message *string `json:"message,omitempty"`
}

// KubernetesClusterInfo kubernetes cluster info
type KubernetesClusterInfo struct {
	ClusterType string `json:"clusterType"`

	// StorageClassNames List of storage class names that are available in the cluster.
	// Deprecated:
	StorageClassNames []string        `json:"storageClassNames"`
	StorageClasses    *[]StorageClass `json:"storageClasses,omitempty"`
}

// KubernetesClusterResources kubernetes cluster resources
type KubernetesClusterResources struct {
	Available ResourcesAvailable `json:"available"`
	Capacity  ResourcesCapacity  `json:"capacity"`
}

// ResourcesAvailable defines model for .
type ResourcesAvailable struct {
	CpuMillis   *uint64 `json:"cpuMillis,omitempty"`
	DiskSize    *uint64 `json:"diskSize,omitempty"`
	MemoryBytes *uint64 `json:"memoryBytes,omitempty"`
}

// ResourcesCapacity defines model for .
type ResourcesCapacity struct {
	CpuMillis   *uint64 `json:"cpuMillis,omitempty"`
	DiskSize    *uint64 `json:"diskSize,omitempty"`
	MemoryBytes *uint64 `json:"memoryBytes,omitempty"`
}

// MonitoringInstance Monitoring instance information
type MonitoringInstance = MonitoringInstanceBaseWithName

// MonitoringInstanceBase Monitoring instance information
type MonitoringInstanceBase struct {
	// AllowedNamespaces List of namespaces allowed to use this monitoring instance
	// Deprecated:
	AllowedNamespaces *[]string                  `json:"allowedNamespaces,omitempty"`
	Type              MonitoringInstanceBaseType `json:"type,omitempty"`
	Url               string                     `json:"url,omitempty"`

	// VerifyTLS VerifyTLS is set to ensure TLS/SSL verification.
	VerifyTLS *bool `json:"verifyTLS,omitempty"`
}

// MonitoringInstanceBaseType defines model for MonitoringInstanceBase.Type.
type MonitoringInstanceBaseType string

// MonitoringInstanceBaseWithName defines model for MonitoringInstanceBaseWithName.
type MonitoringInstanceBaseWithName struct {
	// AllowedNamespaces List of namespaces allowed to use this monitoring instance
	// Deprecated:
	AllowedNamespaces *[]string `json:"allowedNamespaces,omitempty"`

	// Name A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name      string                             `json:"name,omitempty"`
	Namespace string                             `json:"namespace,omitempty"`
	Type      MonitoringInstanceBaseWithNameType `json:"type,omitempty"`
	Url       string                             `json:"url,omitempty"`

	// VerifyTLS VerifyTLS is set to ensure TLS/SSL verification.
	VerifyTLS *bool `json:"verifyTLS,omitempty"`
}

// MonitoringInstanceBaseWithNameType defines model for MonitoringInstanceBaseWithName.Type.
type MonitoringInstanceBaseWithNameType string

// MonitoringInstanceCreateParams defines model for MonitoringInstanceCreateParams.
type MonitoringInstanceCreateParams struct {
	// AllowedNamespaces List of namespaces allowed to use this monitoring instance
	// Deprecated:
	AllowedNamespaces *[]string `json:"allowedNamespaces,omitempty"`

	// Name A user defined string name of the storage in the DNS name format https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name      string                             `json:"name,omitempty"`
	Namespace string                             `json:"namespace,omitempty"`
	Pmm       *PMMMonitoringInstanceSpec         `json:"pmm,omitempty"`
	Type      MonitoringInstanceCreateParamsType `json:"type,omitempty"`
	Url       string                             `json:"url,omitempty"`

	// VerifyTLS VerifyTLS is set to ensure TLS/SSL verification.
	VerifyTLS *bool `json:"verifyTLS,omitempty"`
}

// PMMMonitoringInstanceSpec defines model for .
type PMMMonitoringInstanceSpec struct {
	ApiKey   string `json:"apiKey,omitempty"`
	Password string `json:"password,omitempty"`
	User     string `json:"user,omitempty"`
}

// MonitoringInstanceCreateParamsType defines model for MonitoringInstanceCreateParams.Type.
type MonitoringInstanceCreateParamsType string

// MonitoringInstancePMM defines model for MonitoringInstancePMM.
type MonitoringInstancePMM struct {
	Pmm *PMMMonitoringInstanceSpec `json:"pmm,omitempty"`
}

// MonitoringInstanceUpdateParams defines model for MonitoringInstanceUpdateParams.
type MonitoringInstanceUpdateParams struct {
	// AllowedNamespaces List of namespaces allowed to use this monitoring instance
	// Deprecated:
	AllowedNamespaces *[]string                          `json:"allowedNamespaces,omitempty"`
	Pmm               *PMMMonitoringInstanceSpec         `json:"pmm,omitempty"`
	Type              MonitoringInstanceUpdateParamsType `json:"type,omitempty"`
	Url               string                             `json:"url,omitempty"`

	// VerifyTLS VerifyTLS is set to ensure TLS/SSL verification.
	VerifyTLS *bool `json:"verifyTLS,omitempty"`
}

// MonitoringInstanceUpdateParamsType defines model for MonitoringInstanceUpdateParams.Type.
type MonitoringInstanceUpdateParamsType string

// MonitoringInstancesList defines model for MonitoringInstancesList.
type MonitoringInstancesList = []MonitoringInstance

// NamespaceList defines model for NamespaceList.
type NamespaceList = []string

// OIDCConfig Everest OIDC provider configuration
type OIDCConfig struct {
	// ClientId OIDC application clientID
	ClientId string `json:"clientId"`

	// IssuerURL OIDC provider url
	IssuerURL string `json:"issuerURL"`

	// Scopes OIDC scopes
	Scopes []string `json:"scopes"`
}

// PodSchedulingPolicy PodSchedulingPolicy is the Schema for the Pod Scheduling Policy API.
type PodSchedulingPolicy struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec PodSchedulingPolicySpec defines the desired state of PodSchedulingPolicy.
	Spec *struct {
		// AffinityConfig AffinityConfig is a configuration for the affinity settings depending on the engine type.
		AffinityConfig *struct {
			// Postgresql PostgreSQL is the affinity configuration for the PostgreSQL DB clusters.
			Postgresql *struct {
				// Engine Engine is the affinity configuration for the DB Engine pods.
				Engine *struct {
					// NodeAffinity Describes node affinity scheduling rules for the pod.
					NodeAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node matches the corresponding matchExpressions; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// Preference A node selector term, associated with the corresponding weight.
							Preference struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"preference"`

							// Weight Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to an update), the system
						// may or may not try to eventually evict the pod from its node.
						RequiredDuringSchedulingIgnoredDuringExecution *struct {
							// NodeSelectorTerms Required. A list of node selector terms. The terms are ORed.
							NodeSelectorTerms []struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"nodeSelectorTerms"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"nodeAffinity,omitempty"`

					// PodAffinity Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
					PodAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAffinity,omitempty"`

					// PodAntiAffinity Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
					PodAntiAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the anti-affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling anti-affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the anti-affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the anti-affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAntiAffinity,omitempty"`
				} `json:"engine,omitempty"`

				// Proxy Proxy is the affinity configuration for the DB Proxy pods.
				Proxy *struct {
					// NodeAffinity Describes node affinity scheduling rules for the pod.
					NodeAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node matches the corresponding matchExpressions; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// Preference A node selector term, associated with the corresponding weight.
							Preference struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"preference"`

							// Weight Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to an update), the system
						// may or may not try to eventually evict the pod from its node.
						RequiredDuringSchedulingIgnoredDuringExecution *struct {
							// NodeSelectorTerms Required. A list of node selector terms. The terms are ORed.
							NodeSelectorTerms []struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"nodeSelectorTerms"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"nodeAffinity,omitempty"`

					// PodAffinity Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
					PodAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAffinity,omitempty"`

					// PodAntiAffinity Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
					PodAntiAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the anti-affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling anti-affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the anti-affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the anti-affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAntiAffinity,omitempty"`
				} `json:"proxy,omitempty"`
			} `json:"postgresql,omitempty"`

			// Psmdb PSMDB is the affinity configuration for the PSMDB DB clusters.
			Psmdb *struct {
				// ConfigServer ConfigServer is the affinity configuration for the DB Config Server pods.
				ConfigServer *struct {
					// NodeAffinity Describes node affinity scheduling rules for the pod.
					NodeAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node matches the corresponding matchExpressions; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// Preference A node selector term, associated with the corresponding weight.
							Preference struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"preference"`

							// Weight Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to an update), the system
						// may or may not try to eventually evict the pod from its node.
						RequiredDuringSchedulingIgnoredDuringExecution *struct {
							// NodeSelectorTerms Required. A list of node selector terms. The terms are ORed.
							NodeSelectorTerms []struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"nodeSelectorTerms"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"nodeAffinity,omitempty"`

					// PodAffinity Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
					PodAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAffinity,omitempty"`

					// PodAntiAffinity Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
					PodAntiAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the anti-affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling anti-affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the anti-affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the anti-affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAntiAffinity,omitempty"`
				} `json:"configServer,omitempty"`

				// Engine Engine is the affinity configuration for the DB Engine pods.
				Engine *struct {
					// NodeAffinity Describes node affinity scheduling rules for the pod.
					NodeAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node matches the corresponding matchExpressions; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// Preference A node selector term, associated with the corresponding weight.
							Preference struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"preference"`

							// Weight Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to an update), the system
						// may or may not try to eventually evict the pod from its node.
						RequiredDuringSchedulingIgnoredDuringExecution *struct {
							// NodeSelectorTerms Required. A list of node selector terms. The terms are ORed.
							NodeSelectorTerms []struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"nodeSelectorTerms"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"nodeAffinity,omitempty"`

					// PodAffinity Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
					PodAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAffinity,omitempty"`

					// PodAntiAffinity Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
					PodAntiAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the anti-affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling anti-affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the anti-affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the anti-affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAntiAffinity,omitempty"`
				} `json:"engine,omitempty"`

				// Proxy Proxy is the affinity configuration for the DB Proxy pods.
				Proxy *struct {
					// NodeAffinity Describes node affinity scheduling rules for the pod.
					NodeAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node matches the corresponding matchExpressions; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// Preference A node selector term, associated with the corresponding weight.
							Preference struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"preference"`

							// Weight Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to an update), the system
						// may or may not try to eventually evict the pod from its node.
						RequiredDuringSchedulingIgnoredDuringExecution *struct {
							// NodeSelectorTerms Required. A list of node selector terms. The terms are ORed.
							NodeSelectorTerms []struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"nodeSelectorTerms"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"nodeAffinity,omitempty"`

					// PodAffinity Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
					PodAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAffinity,omitempty"`

					// PodAntiAffinity Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
					PodAntiAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the anti-affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling anti-affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the anti-affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the anti-affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAntiAffinity,omitempty"`
				} `json:"proxy,omitempty"`
			} `json:"psmdb,omitempty"`

			// Pxc PXC is the affinity configuration for the PXC DB clusters.
			Pxc *struct {
				// Engine Engine is the affinity configuration for the DB Engine pods.
				Engine *struct {
					// NodeAffinity Describes node affinity scheduling rules for the pod.
					NodeAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node matches the corresponding matchExpressions; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// Preference A node selector term, associated with the corresponding weight.
							Preference struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"preference"`

							// Weight Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to an update), the system
						// may or may not try to eventually evict the pod from its node.
						RequiredDuringSchedulingIgnoredDuringExecution *struct {
							// NodeSelectorTerms Required. A list of node selector terms. The terms are ORed.
							NodeSelectorTerms []struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"nodeSelectorTerms"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"nodeAffinity,omitempty"`

					// PodAffinity Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
					PodAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAffinity,omitempty"`

					// PodAntiAffinity Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
					PodAntiAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the anti-affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling anti-affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the anti-affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the anti-affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAntiAffinity,omitempty"`
				} `json:"engine,omitempty"`

				// Proxy Proxy is the affinity configuration for the DB Proxy pods.
				Proxy *struct {
					// NodeAffinity Describes node affinity scheduling rules for the pod.
					NodeAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node matches the corresponding matchExpressions; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// Preference A node selector term, associated with the corresponding weight.
							Preference struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"preference"`

							// Weight Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to an update), the system
						// may or may not try to eventually evict the pod from its node.
						RequiredDuringSchedulingIgnoredDuringExecution *struct {
							// NodeSelectorTerms Required. A list of node selector terms. The terms are ORed.
							NodeSelectorTerms []struct {
								// MatchExpressions A list of node selector requirements by node's labels.
								MatchExpressions *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchFields A list of node selector requirements by node's fields.
								MatchFields *[]struct {
									// Key The label key that the selector applies to.
									Key string `json:"key"`

									// Operator Represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
									Operator string `json:"operator"`

									// Values An array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. If the operator is Gt or Lt, the values
									// array must have a single element, which will be interpreted as an integer.
									// This array is replaced during a strategic merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchFields,omitempty"`
							} `json:"nodeSelectorTerms"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"nodeAffinity,omitempty"`

					// PodAffinity Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
					PodAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAffinity,omitempty"`

					// PodAntiAffinity Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
					PodAntiAffinity *struct {
						// PreferredDuringSchedulingIgnoredDuringExecution The scheduler will prefer to schedule pods to nodes that satisfy
						// the anti-affinity expressions specified by this field, but it may choose
						// a node that violates one or more of the expressions. The node that is
						// most preferred is the one with the greatest sum of weights, i.e.
						// for each node that meets all of the scheduling requirements (resource
						// request, requiredDuringScheduling anti-affinity expressions, etc.),
						// compute a sum by iterating through the elements of this field and adding
						// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
						// node(s) with the highest sum are the most preferred.
						PreferredDuringSchedulingIgnoredDuringExecution *[]struct {
							// PodAffinityTerm Required. A pod affinity term, associated with the corresponding weight.
							PodAffinityTerm struct {
								// LabelSelector A label query over a set of resources, in this case pods.
								// If it's null, this PodAffinityTerm matches with no Pods.
								LabelSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"labelSelector,omitempty"`

								// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
								// Also, matchLabelKeys cannot be set when labelSelector isn't set.
								MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

								// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
								// be taken into consideration. The keys are used to lookup values from the
								// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
								// to select the group of existing pods which pods will be taken into consideration
								// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
								// pod labels will be ignored. The default value is empty.
								// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
								// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
								MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

								// NamespaceSelector A label query over the set of namespaces that the term applies to.
								// The term is applied to the union of the namespaces selected by this field
								// and the ones listed in the namespaces field.
								// null selector and null or empty namespaces list means "this pod's namespace".
								// An empty selector ({}) matches all namespaces.
								NamespaceSelector *struct {
									// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
									MatchExpressions *[]struct {
										// Key key is the label key that the selector applies to.
										Key string `json:"key"`

										// Operator operator represents a key's relationship to a set of values.
										// Valid operators are In, NotIn, Exists and DoesNotExist.
										Operator string `json:"operator"`

										// Values values is an array of string values. If the operator is In or NotIn,
										// the values array must be non-empty. If the operator is Exists or DoesNotExist,
										// the values array must be empty. This array is replaced during a strategic
										// merge patch.
										Values *[]string `json:"values,omitempty"`
									} `json:"matchExpressions,omitempty"`

									// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
									// map is equivalent to an element of matchExpressions, whose key field is "key", the
									// operator is "In", and the values array contains only "value". The requirements are ANDed.
									MatchLabels *map[string]string `json:"matchLabels,omitempty"`
								} `json:"namespaceSelector,omitempty"`

								// Namespaces namespaces specifies a static list of namespace names that the term applies to.
								// The term is applied to the union of the namespaces listed in this field
								// and the ones selected by namespaceSelector.
								// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
								Namespaces *[]string `json:"namespaces,omitempty"`

								// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
								// the labelSelector in the specified namespaces, where co-located is defined as running on a node
								// whose value of the label with key topologyKey matches that of any node on which any of the
								// selected pods is running.
								// Empty topologyKey is not allowed.
								TopologyKey string `json:"topologyKey"`
							} `json:"podAffinityTerm"`

							// Weight weight associated with matching the corresponding podAffinityTerm,
							// in the range 1-100.
							Weight int32 `json:"weight"`
						} `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`

						// RequiredDuringSchedulingIgnoredDuringExecution If the anti-affinity requirements specified by this field are not met at
						// scheduling time, the pod will not be scheduled onto the node.
						// If the anti-affinity requirements specified by this field cease to be met
						// at some point during pod execution (e.g. due to a pod label update), the
						// system may or may not try to eventually evict the pod from its node.
						// When there are multiple elements, the lists of nodes corresponding to each
						// podAffinityTerm are intersected, i.e. all terms must be satisfied.
						RequiredDuringSchedulingIgnoredDuringExecution *[]struct {
							// LabelSelector A label query over a set of resources, in this case pods.
							// If it's null, this PodAffinityTerm matches with no Pods.
							LabelSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"labelSelector,omitempty"`

							// MatchLabelKeys MatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both matchLabelKeys and labelSelector.
							// Also, matchLabelKeys cannot be set when labelSelector isn't set.
							MatchLabelKeys *[]string `json:"matchLabelKeys,omitempty"`

							// MismatchLabelKeys MismatchLabelKeys is a set of pod label keys to select which pods will
							// be taken into consideration. The keys are used to lookup values from the
							// incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
							// to select the group of existing pods which pods will be taken into consideration
							// for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
							// pod labels will be ignored. The default value is empty.
							// The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
							// Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
							MismatchLabelKeys *[]string `json:"mismatchLabelKeys,omitempty"`

							// NamespaceSelector A label query over the set of namespaces that the term applies to.
							// The term is applied to the union of the namespaces selected by this field
							// and the ones listed in the namespaces field.
							// null selector and null or empty namespaces list means "this pod's namespace".
							// An empty selector ({}) matches all namespaces.
							NamespaceSelector *struct {
								// MatchExpressions matchExpressions is a list of label selector requirements. The requirements are ANDed.
								MatchExpressions *[]struct {
									// Key key is the label key that the selector applies to.
									Key string `json:"key"`

									// Operator operator represents a key's relationship to a set of values.
									// Valid operators are In, NotIn, Exists and DoesNotExist.
									Operator string `json:"operator"`

									// Values values is an array of string values. If the operator is In or NotIn,
									// the values array must be non-empty. If the operator is Exists or DoesNotExist,
									// the values array must be empty. This array is replaced during a strategic
									// merge patch.
									Values *[]string `json:"values,omitempty"`
								} `json:"matchExpressions,omitempty"`

								// MatchLabels matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
								// map is equivalent to an element of matchExpressions, whose key field is "key", the
								// operator is "In", and the values array contains only "value". The requirements are ANDed.
								MatchLabels *map[string]string `json:"matchLabels,omitempty"`
							} `json:"namespaceSelector,omitempty"`

							// Namespaces namespaces specifies a static list of namespace names that the term applies to.
							// The term is applied to the union of the namespaces listed in this field
							// and the ones selected by namespaceSelector.
							// null or empty namespaces list and null namespaceSelector means "this pod's namespace".
							Namespaces *[]string `json:"namespaces,omitempty"`

							// TopologyKey This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
							// the labelSelector in the specified namespaces, where co-located is defined as running on a node
							// whose value of the label with key topologyKey matches that of any node on which any of the
							// selected pods is running.
							// Empty topologyKey is not allowed.
							TopologyKey string `json:"topologyKey"`
						} `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
					} `json:"podAntiAffinity,omitempty"`
				} `json:"proxy,omitempty"`
			} `json:"pxc,omitempty"`
		} `json:"affinityConfig,omitempty"`

		// EngineType EngineType is type of DB engine that this policy can be applied to.
		EngineType PodSchedulingPolicySpecEngineType `json:"engineType"`
	} `json:"spec,omitempty"`

	// Status PodSchedulingPolicyStatus defines the observed state of PodSchedulingPolicy.
	Status *struct {
		// InUse InUse is a flag that indicates if the policy is used by any DB cluster.
		InUse *bool `json:"inUse,omitempty"`

		// LastObservedGeneration LastObservedGeneration is the most recent generation observed for this PodSchedulingPolicy.
		LastObservedGeneration *int64 `json:"lastObservedGeneration,omitempty"`
	} `json:"status,omitempty"`
}

// PodSchedulingPolicySpecEngineType EngineType is type of DB engine that this policy can be applied to.
type PodSchedulingPolicySpecEngineType string

// PodSchedulingPolicyList PodSchedulingPolicyList is an object that contains the list of the existing pod scheduling policies.
type PodSchedulingPolicyList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string                `json:"apiVersion,omitempty"`
	Items      *[]PodSchedulingPolicy `json:"items,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// Secret Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
type Secret struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Data Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
	Data *map[string][]byte `json:"data,omitempty"`

	// Immutable Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
	Immutable *bool `json:"immutable,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`

	// Metadata Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// StringData stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.
	StringData *map[string]string `json:"stringData,omitempty"`

	// Type Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
	Type *string `json:"type,omitempty"`
}

// Settings Everest global settings
type Settings struct {
	// OidcConfig Everest OIDC provider configuration
	OidcConfig OIDCConfig `json:"oidcConfig"`
}

// StorageClass StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
//
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
type StorageClass struct {
	// AllowVolumeExpansion allowVolumeExpansion shows whether the storage class allow volume expand.
	AllowVolumeExpansion *bool `json:"allowVolumeExpansion,omitempty"`

	// Metadata Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// UpdateBackupStorageParams Backup storage parameters
type UpdateBackupStorageParams struct {
	AccessKey *string `json:"accessKey,omitempty"`

	// AllowedNamespaces List of namespaces allowed to use this backup storage
	// Deprecated:
	AllowedNamespaces *[]string `json:"allowedNamespaces,omitempty"`

	// BucketName The cloud storage bucket/container name
	BucketName     *string `json:"bucketName,omitempty"`
	Description    *string `json:"description,omitempty"`
	ForcePathStyle *bool   `json:"forcePathStyle,omitempty"`
	Region         *string `json:"region,omitempty"`
	SecretKey      *string `json:"secretKey,omitempty"`
	Url            *string `json:"url,omitempty"`
	VerifyTLS      *bool   `json:"verifyTLS,omitempty"`
}

// Upgrade defines model for Upgrade.
type Upgrade struct {
	// CurrentVersion The current operator version
	CurrentVersion *string `json:"currentVersion,omitempty"`

	// Name Name of the operator
	Name *string `json:"name,omitempty"`

	// TargetVersion The next version of the operator to upgrade to.
	TargetVersion *string `json:"targetVersion,omitempty"`
}

// UpgradePlan Operators upgrade plan
type UpgradePlan struct {
	PendingActions *[]UpgradeTask `json:"pendingActions,omitempty"`
	Upgrades       *[]Upgrade     `json:"upgrades,omitempty"`
}

// UpgradePlanApproval This no-op object is used to trigger the operator upgrade in a namespace.
type UpgradePlanApproval = map[string]interface{}

// UpgradeTask defines model for UpgradeTask.
type UpgradeTask struct {
	Message *string `json:"message,omitempty"`

	// Name Name of the database cluster
	Name *string `json:"name,omitempty"`

	// PendingTask Pending task for the database cluster
	PendingTask *UpgradeTaskPendingTask `json:"pendingTask,omitempty"`
}

// UpgradeTaskPendingTask Pending task for the database cluster
type UpgradeTaskPendingTask string

// UserCredentials defines model for UserCredentials.
type UserCredentials struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// UserPermissions defines model for UserPermissions.
type UserPermissions struct {
	Enabled     bool        `json:"enabled"`
	Permissions *[][]string `json:"permissions,omitempty"`
}

// Version Everest version info
type Version struct {
	FullCommit  string `json:"fullCommit"`
	ProjectName string `json:"projectName"`
	Version     string `json:"version"`
}

// IoK8sApimachineryPkgApisMetaV1ListMeta ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type IoK8sApimachineryPkgApisMetaV1ListMeta struct {
	// Continue continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
	Continue *string `json:"continue,omitempty"`

	// RemainingItemCount remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
	RemainingItemCount *int64 `json:"remainingItemCount,omitempty"`

	// ResourceVersion String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `json:"resourceVersion,omitempty"`

	// SelfLink selfLink is a URL representing this object. Populated by the system. Read-only.
	//
	// DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
	SelfLink *string `json:"selfLink,omitempty"`
}

// IoK8sApimachineryPkgApisMetaV1StatusCause StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
type IoK8sApimachineryPkgApisMetaV1StatusCause struct {
	// Field The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
	//
	// Examples:
	//   "name" - the field "name" on the current resource
	//   "items[0].name" - the field "name" on the first array entry in "items"
	Field *string `json:"field,omitempty"`

	// Message A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
	Message *string `json:"message,omitempty"`

	// Reason A machine-readable description of the cause of the error. If this value is empty there is no information available.
	Reason *string `json:"reason,omitempty"`
}

// IoK8sApimachineryPkgApisMetaV1StatusDetailsV2 StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
type IoK8sApimachineryPkgApisMetaV1StatusDetailsV2 struct {
	// Causes The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
	Causes *[]IoK8sApimachineryPkgApisMetaV1StatusCause `json:"causes,omitempty"`

	// Group The group attribute of the resource associated with the status StatusReason.
	Group *string `json:"group,omitempty"`

	// Kind The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`

	// Name The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
	Name *string `json:"name,omitempty"`

	// RetryAfterSeconds If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
	RetryAfterSeconds *int32 `json:"retryAfterSeconds,omitempty"`

	// Uid UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid *string `json:"uid,omitempty"`
}

// IoK8sApimachineryPkgApisMetaV1StatusV2 Status is a return value for calls that don't return other objects.
type IoK8sApimachineryPkgApisMetaV1StatusV2 struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Code Suggested HTTP return code for this status, 0 if not set.
	Code *int32 `json:"code,omitempty"`

	// Details StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
	Details *IoK8sApimachineryPkgApisMetaV1StatusDetailsV2 `json:"details,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`

	// Message A human-readable description of the status of this operation.
	Message *string `json:"message,omitempty"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata *IoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata,omitempty"`

	// Reason A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
	Reason *string `json:"reason,omitempty"`

	// Status Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *string `json:"status,omitempty"`
}

// ListDataImportersParams defines parameters for ListDataImporters.
type ListDataImportersParams struct {
	// SupportedEngines Filter data importers by supported database engine type. Accepts a comma-separated list.
	SupportedEngines *[]string `form:"supportedEngines,omitempty" json:"supportedEngines,omitempty"`
}

// DeleteDatabaseClusterBackupParams defines parameters for DeleteDatabaseClusterBackup.
type DeleteDatabaseClusterBackupParams struct {
	// CleanupBackupStorage If set, remove the backed up data from storage
	CleanupBackupStorage *bool `form:"cleanupBackupStorage,omitempty" json:"cleanupBackupStorage,omitempty"`
}

// CreateDatabaseClusterSecretParams defines parameters for CreateDatabaseClusterSecret.
type CreateDatabaseClusterSecretParams struct {
	// SecretName Optional name of the secret to be created. If not provided, a random name will be generated.
	SecretName *string `form:"secretName,omitempty" json:"secretName,omitempty"`
}

// DeleteDatabaseClusterParams defines parameters for DeleteDatabaseCluster.
type DeleteDatabaseClusterParams struct {
	// CleanupBackupStorage If set, remove the backed up data from storage
	CleanupBackupStorage *bool `form:"cleanupBackupStorage,omitempty" json:"cleanupBackupStorage,omitempty"`
}

// ListPodSchedulingPolicyParams defines parameters for ListPodSchedulingPolicy.
type ListPodSchedulingPolicyParams struct {
	// EngineType Database engine type that Pod Scheduling Policy is applicable to.
	EngineType *ListPodSchedulingPolicyParamsEngineType `form:"engineType,omitempty" json:"engineType,omitempty"`

	// HasRules Return list of Pod Scheduling Policy that has at least 1 rule.
	HasRules *bool `form:"hasRules,omitempty" json:"hasRules,omitempty"`
}

// ListPodSchedulingPolicyParamsEngineType defines parameters for ListPodSchedulingPolicy.
type ListPodSchedulingPolicyParamsEngineType string

// CreateBackupStorageJSONRequestBody defines body for CreateBackupStorage for application/json ContentType.
type CreateBackupStorageJSONRequestBody = CreateBackupStorageParams

// UpdateBackupStorageJSONRequestBody defines body for UpdateBackupStorage for application/json ContentType.
type UpdateBackupStorageJSONRequestBody = UpdateBackupStorageParams

// CreateDatabaseClusterBackupJSONRequestBody defines body for CreateDatabaseClusterBackup for application/json ContentType.
type CreateDatabaseClusterBackupJSONRequestBody = DatabaseClusterBackup

// CreateDatabaseClusterRestoreJSONRequestBody defines body for CreateDatabaseClusterRestore for application/json ContentType.
type CreateDatabaseClusterRestoreJSONRequestBody = DatabaseClusterRestore

// UpdateDatabaseClusterRestoreJSONRequestBody defines body for UpdateDatabaseClusterRestore for application/json ContentType.
type UpdateDatabaseClusterRestoreJSONRequestBody = DatabaseClusterRestore

// CreateDatabaseClusterJSONRequestBody defines body for CreateDatabaseCluster for application/json ContentType.
type CreateDatabaseClusterJSONRequestBody = DatabaseCluster

// CreateDatabaseClusterSecretJSONRequestBody defines body for CreateDatabaseClusterSecret for application/json ContentType.
type CreateDatabaseClusterSecretJSONRequestBody = Secret

// UpdateDatabaseClusterJSONRequestBody defines body for UpdateDatabaseCluster for application/json ContentType.
type UpdateDatabaseClusterJSONRequestBody = DatabaseCluster

// ApproveUpgradePlanJSONRequestBody defines body for ApproveUpgradePlan for application/json ContentType.
type ApproveUpgradePlanJSONRequestBody = UpgradePlanApproval

// UpdateDatabaseEngineJSONRequestBody defines body for UpdateDatabaseEngine for application/json ContentType.
type UpdateDatabaseEngineJSONRequestBody = DatabaseEngine

// CreateMonitoringInstanceJSONRequestBody defines body for CreateMonitoringInstance for application/json ContentType.
type CreateMonitoringInstanceJSONRequestBody = MonitoringInstanceCreateParams

// UpdateMonitoringInstanceJSONRequestBody defines body for UpdateMonitoringInstance for application/json ContentType.
type UpdateMonitoringInstanceJSONRequestBody = MonitoringInstanceUpdateParams

// CreatePodSchedulingPolicyJSONRequestBody defines body for CreatePodSchedulingPolicy for application/json ContentType.
type CreatePodSchedulingPolicyJSONRequestBody = PodSchedulingPolicy

// UpdatePodSchedulingPolicyJSONRequestBody defines body for UpdatePodSchedulingPolicy for application/json ContentType.
type UpdatePodSchedulingPolicyJSONRequestBody = PodSchedulingPolicy

// CreateSessionJSONRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody = UserCredentials

// AsDatabaseClusterSpecEngineResourcesCpu0 returns the union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu as a DatabaseClusterSpecEngineResourcesCpu0
func (t DatabaseCluster_Spec_Engine_Resources_Cpu) AsDatabaseClusterSpecEngineResourcesCpu0() (DatabaseClusterSpecEngineResourcesCpu0, error) {
	var body DatabaseClusterSpecEngineResourcesCpu0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineResourcesCpu0 overwrites any union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu as the provided DatabaseClusterSpecEngineResourcesCpu0
func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) FromDatabaseClusterSpecEngineResourcesCpu0(v DatabaseClusterSpecEngineResourcesCpu0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineResourcesCpu0 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu, using the provided DatabaseClusterSpecEngineResourcesCpu0
func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) MergeDatabaseClusterSpecEngineResourcesCpu0(v DatabaseClusterSpecEngineResourcesCpu0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecEngineResourcesCpu1 returns the union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu as a DatabaseClusterSpecEngineResourcesCpu1
func (t DatabaseCluster_Spec_Engine_Resources_Cpu) AsDatabaseClusterSpecEngineResourcesCpu1() (DatabaseClusterSpecEngineResourcesCpu1, error) {
	var body DatabaseClusterSpecEngineResourcesCpu1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineResourcesCpu1 overwrites any union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu as the provided DatabaseClusterSpecEngineResourcesCpu1
func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) FromDatabaseClusterSpecEngineResourcesCpu1(v DatabaseClusterSpecEngineResourcesCpu1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineResourcesCpu1 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Resources_Cpu, using the provided DatabaseClusterSpecEngineResourcesCpu1
func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) MergeDatabaseClusterSpecEngineResourcesCpu1(v DatabaseClusterSpecEngineResourcesCpu1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Engine_Resources_Cpu) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Engine_Resources_Cpu) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecEngineResourcesMemory0 returns the union data inside the DatabaseCluster_Spec_Engine_Resources_Memory as a DatabaseClusterSpecEngineResourcesMemory0
func (t DatabaseCluster_Spec_Engine_Resources_Memory) AsDatabaseClusterSpecEngineResourcesMemory0() (DatabaseClusterSpecEngineResourcesMemory0, error) {
	var body DatabaseClusterSpecEngineResourcesMemory0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineResourcesMemory0 overwrites any union data inside the DatabaseCluster_Spec_Engine_Resources_Memory as the provided DatabaseClusterSpecEngineResourcesMemory0
func (t *DatabaseCluster_Spec_Engine_Resources_Memory) FromDatabaseClusterSpecEngineResourcesMemory0(v DatabaseClusterSpecEngineResourcesMemory0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineResourcesMemory0 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Resources_Memory, using the provided DatabaseClusterSpecEngineResourcesMemory0
func (t *DatabaseCluster_Spec_Engine_Resources_Memory) MergeDatabaseClusterSpecEngineResourcesMemory0(v DatabaseClusterSpecEngineResourcesMemory0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecEngineResourcesMemory1 returns the union data inside the DatabaseCluster_Spec_Engine_Resources_Memory as a DatabaseClusterSpecEngineResourcesMemory1
func (t DatabaseCluster_Spec_Engine_Resources_Memory) AsDatabaseClusterSpecEngineResourcesMemory1() (DatabaseClusterSpecEngineResourcesMemory1, error) {
	var body DatabaseClusterSpecEngineResourcesMemory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineResourcesMemory1 overwrites any union data inside the DatabaseCluster_Spec_Engine_Resources_Memory as the provided DatabaseClusterSpecEngineResourcesMemory1
func (t *DatabaseCluster_Spec_Engine_Resources_Memory) FromDatabaseClusterSpecEngineResourcesMemory1(v DatabaseClusterSpecEngineResourcesMemory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineResourcesMemory1 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Resources_Memory, using the provided DatabaseClusterSpecEngineResourcesMemory1
func (t *DatabaseCluster_Spec_Engine_Resources_Memory) MergeDatabaseClusterSpecEngineResourcesMemory1(v DatabaseClusterSpecEngineResourcesMemory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Engine_Resources_Memory) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Engine_Resources_Memory) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecEngineStorageSize0 returns the union data inside the DatabaseCluster_Spec_Engine_Storage_Size as a DatabaseClusterSpecEngineStorageSize0
func (t DatabaseCluster_Spec_Engine_Storage_Size) AsDatabaseClusterSpecEngineStorageSize0() (DatabaseClusterSpecEngineStorageSize0, error) {
	var body DatabaseClusterSpecEngineStorageSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineStorageSize0 overwrites any union data inside the DatabaseCluster_Spec_Engine_Storage_Size as the provided DatabaseClusterSpecEngineStorageSize0
func (t *DatabaseCluster_Spec_Engine_Storage_Size) FromDatabaseClusterSpecEngineStorageSize0(v DatabaseClusterSpecEngineStorageSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineStorageSize0 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Storage_Size, using the provided DatabaseClusterSpecEngineStorageSize0
func (t *DatabaseCluster_Spec_Engine_Storage_Size) MergeDatabaseClusterSpecEngineStorageSize0(v DatabaseClusterSpecEngineStorageSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecEngineStorageSize1 returns the union data inside the DatabaseCluster_Spec_Engine_Storage_Size as a DatabaseClusterSpecEngineStorageSize1
func (t DatabaseCluster_Spec_Engine_Storage_Size) AsDatabaseClusterSpecEngineStorageSize1() (DatabaseClusterSpecEngineStorageSize1, error) {
	var body DatabaseClusterSpecEngineStorageSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecEngineStorageSize1 overwrites any union data inside the DatabaseCluster_Spec_Engine_Storage_Size as the provided DatabaseClusterSpecEngineStorageSize1
func (t *DatabaseCluster_Spec_Engine_Storage_Size) FromDatabaseClusterSpecEngineStorageSize1(v DatabaseClusterSpecEngineStorageSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecEngineStorageSize1 performs a merge with any union data inside the DatabaseCluster_Spec_Engine_Storage_Size, using the provided DatabaseClusterSpecEngineStorageSize1
func (t *DatabaseCluster_Spec_Engine_Storage_Size) MergeDatabaseClusterSpecEngineStorageSize1(v DatabaseClusterSpecEngineStorageSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Engine_Storage_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Engine_Storage_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesLimits0 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesLimits0
func (t DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesLimits0() (DatabaseClusterSpecMonitoringResourcesLimits0, error) {
	var body DatabaseClusterSpecMonitoringResourcesLimits0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesLimits0 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesLimits0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesLimits0(v DatabaseClusterSpecMonitoringResourcesLimits0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesLimits0 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesLimits0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesLimits0(v DatabaseClusterSpecMonitoringResourcesLimits0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesLimits1 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesLimits1
func (t DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesLimits1() (DatabaseClusterSpecMonitoringResourcesLimits1, error) {
	var body DatabaseClusterSpecMonitoringResourcesLimits1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesLimits1 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesLimits1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesLimits1(v DatabaseClusterSpecMonitoringResourcesLimits1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesLimits1 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesLimits1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesLimits1(v DatabaseClusterSpecMonitoringResourcesLimits1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Monitoring_Resources_Limits_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesRequests0 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesRequests0
func (t DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesRequests0() (DatabaseClusterSpecMonitoringResourcesRequests0, error) {
	var body DatabaseClusterSpecMonitoringResourcesRequests0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesRequests0 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesRequests0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesRequests0(v DatabaseClusterSpecMonitoringResourcesRequests0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesRequests0 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesRequests0
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesRequests0(v DatabaseClusterSpecMonitoringResourcesRequests0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecMonitoringResourcesRequests1 returns the union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as a DatabaseClusterSpecMonitoringResourcesRequests1
func (t DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) AsDatabaseClusterSpecMonitoringResourcesRequests1() (DatabaseClusterSpecMonitoringResourcesRequests1, error) {
	var body DatabaseClusterSpecMonitoringResourcesRequests1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecMonitoringResourcesRequests1 overwrites any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties as the provided DatabaseClusterSpecMonitoringResourcesRequests1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) FromDatabaseClusterSpecMonitoringResourcesRequests1(v DatabaseClusterSpecMonitoringResourcesRequests1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecMonitoringResourcesRequests1 performs a merge with any union data inside the DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties, using the provided DatabaseClusterSpecMonitoringResourcesRequests1
func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) MergeDatabaseClusterSpecMonitoringResourcesRequests1(v DatabaseClusterSpecMonitoringResourcesRequests1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Monitoring_Resources_Requests_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecProxyResourcesCpu0 returns the union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu as a DatabaseClusterSpecProxyResourcesCpu0
func (t DatabaseCluster_Spec_Proxy_Resources_Cpu) AsDatabaseClusterSpecProxyResourcesCpu0() (DatabaseClusterSpecProxyResourcesCpu0, error) {
	var body DatabaseClusterSpecProxyResourcesCpu0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecProxyResourcesCpu0 overwrites any union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu as the provided DatabaseClusterSpecProxyResourcesCpu0
func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) FromDatabaseClusterSpecProxyResourcesCpu0(v DatabaseClusterSpecProxyResourcesCpu0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecProxyResourcesCpu0 performs a merge with any union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu, using the provided DatabaseClusterSpecProxyResourcesCpu0
func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) MergeDatabaseClusterSpecProxyResourcesCpu0(v DatabaseClusterSpecProxyResourcesCpu0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecProxyResourcesCpu1 returns the union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu as a DatabaseClusterSpecProxyResourcesCpu1
func (t DatabaseCluster_Spec_Proxy_Resources_Cpu) AsDatabaseClusterSpecProxyResourcesCpu1() (DatabaseClusterSpecProxyResourcesCpu1, error) {
	var body DatabaseClusterSpecProxyResourcesCpu1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecProxyResourcesCpu1 overwrites any union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu as the provided DatabaseClusterSpecProxyResourcesCpu1
func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) FromDatabaseClusterSpecProxyResourcesCpu1(v DatabaseClusterSpecProxyResourcesCpu1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecProxyResourcesCpu1 performs a merge with any union data inside the DatabaseCluster_Spec_Proxy_Resources_Cpu, using the provided DatabaseClusterSpecProxyResourcesCpu1
func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) MergeDatabaseClusterSpecProxyResourcesCpu1(v DatabaseClusterSpecProxyResourcesCpu1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Proxy_Resources_Cpu) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Proxy_Resources_Cpu) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseClusterSpecProxyResourcesMemory0 returns the union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory as a DatabaseClusterSpecProxyResourcesMemory0
func (t DatabaseCluster_Spec_Proxy_Resources_Memory) AsDatabaseClusterSpecProxyResourcesMemory0() (DatabaseClusterSpecProxyResourcesMemory0, error) {
	var body DatabaseClusterSpecProxyResourcesMemory0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecProxyResourcesMemory0 overwrites any union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory as the provided DatabaseClusterSpecProxyResourcesMemory0
func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) FromDatabaseClusterSpecProxyResourcesMemory0(v DatabaseClusterSpecProxyResourcesMemory0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecProxyResourcesMemory0 performs a merge with any union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory, using the provided DatabaseClusterSpecProxyResourcesMemory0
func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) MergeDatabaseClusterSpecProxyResourcesMemory0(v DatabaseClusterSpecProxyResourcesMemory0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatabaseClusterSpecProxyResourcesMemory1 returns the union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory as a DatabaseClusterSpecProxyResourcesMemory1
func (t DatabaseCluster_Spec_Proxy_Resources_Memory) AsDatabaseClusterSpecProxyResourcesMemory1() (DatabaseClusterSpecProxyResourcesMemory1, error) {
	var body DatabaseClusterSpecProxyResourcesMemory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseClusterSpecProxyResourcesMemory1 overwrites any union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory as the provided DatabaseClusterSpecProxyResourcesMemory1
func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) FromDatabaseClusterSpecProxyResourcesMemory1(v DatabaseClusterSpecProxyResourcesMemory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseClusterSpecProxyResourcesMemory1 performs a merge with any union data inside the DatabaseCluster_Spec_Proxy_Resources_Memory, using the provided DatabaseClusterSpecProxyResourcesMemory1
func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) MergeDatabaseClusterSpecProxyResourcesMemory1(v DatabaseClusterSpecProxyResourcesMemory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DatabaseCluster_Spec_Proxy_Resources_Memory) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseCluster_Spec_Proxy_Resources_Memory) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Cluster info
	// (GET /cluster-info)
	GetKubernetesClusterInfo(ctx echo.Context) error
	// List data importers
	// (GET /data-importers)
	ListDataImporters(ctx echo.Context, params ListDataImportersParams) error
	// Managed namespaces
	// (GET /namespaces)
	ListNamespaces(ctx echo.Context) error
	// List backup storages
	// (GET /namespaces/{namespace}/backup-storages)
	ListBackupStorages(ctx echo.Context, namespace string) error
	// Create backup storage
	// (POST /namespaces/{namespace}/backup-storages)
	CreateBackupStorage(ctx echo.Context, namespace string) error
	// Delete backup storage
	// (DELETE /namespaces/{namespace}/backup-storages/{name})
	DeleteBackupStorage(ctx echo.Context, namespace string, name string) error
	// Get backup storage
	// (GET /namespaces/{namespace}/backup-storages/{name})
	GetBackupStorage(ctx echo.Context, namespace string, name string) error
	// Update backup storage
	// (PATCH /namespaces/{namespace}/backup-storages/{name})
	UpdateBackupStorage(ctx echo.Context, namespace string, name string) error
	// Create database cluster backup
	// (POST /namespaces/{namespace}/database-cluster-backups)
	CreateDatabaseClusterBackup(ctx echo.Context, namespace string) error
	// Delete database cluster backup
	// (DELETE /namespaces/{namespace}/database-cluster-backups/{name})
	DeleteDatabaseClusterBackup(ctx echo.Context, namespace string, name string, params DeleteDatabaseClusterBackupParams) error
	// Get database cluster backup
	// (GET /namespaces/{namespace}/database-cluster-backups/{name})
	GetDatabaseClusterBackup(ctx echo.Context, namespace string, name string) error
	// Create database cluster restore
	// (POST /namespaces/{namespace}/database-cluster-restores)
	CreateDatabaseClusterRestore(ctx echo.Context, namespace string) error
	// Delete database cluster restore
	// (DELETE /namespaces/{namespace}/database-cluster-restores/{name})
	DeleteDatabaseClusterRestore(ctx echo.Context, namespace string, name string) error
	// Get database cluster restore
	// (GET /namespaces/{namespace}/database-cluster-restores/{name})
	GetDatabaseClusterRestore(ctx echo.Context, namespace string, name string) error
	// Update database cluster restore
	// (PUT /namespaces/{namespace}/database-cluster-restores/{name})
	UpdateDatabaseClusterRestore(ctx echo.Context, namespace string, name string) error
	// List database clusters
	// (GET /namespaces/{namespace}/database-clusters)
	ListDatabaseClusters(ctx echo.Context, namespace string) error
	// Create database cluster
	// (POST /namespaces/{namespace}/database-clusters)
	CreateDatabaseCluster(ctx echo.Context, namespace string) error
	// List database cluster backups
	// (GET /namespaces/{namespace}/database-clusters/{cluster-name}/backups)
	ListDatabaseClusterBackups(ctx echo.Context, namespace string, clusterName string) error
	// List database cluster restores
	// (GET /namespaces/{namespace}/database-clusters/{cluster-name}/restores)
	ListDatabaseClusterRestores(ctx echo.Context, namespace string, clusterName string) error
	// List data import jobs for a database cluster
	// (GET /namespaces/{namespace}/database-clusters/{dbName}/data-import-jobs)
	ListDataImportJobs(ctx echo.Context, namespace string, dbName string) error
	// Create a secret for the given database cluster
	// (POST /namespaces/{namespace}/database-clusters/{dbName}/secret)
	CreateDatabaseClusterSecret(ctx echo.Context, namespace string, dbName string, params CreateDatabaseClusterSecretParams) error
	// Delete database cluster
	// (DELETE /namespaces/{namespace}/database-clusters/{name})
	DeleteDatabaseCluster(ctx echo.Context, namespace string, name string, params DeleteDatabaseClusterParams) error
	// Get database cluster
	// (GET /namespaces/{namespace}/database-clusters/{name})
	GetDatabaseCluster(ctx echo.Context, namespace string, name string) error
	// Update database cluster
	// (PUT /namespaces/{namespace}/database-clusters/{name})
	UpdateDatabaseCluster(ctx echo.Context, namespace string, name string) error
	// Get database cluster components
	// (GET /namespaces/{namespace}/database-clusters/{name}/components)
	GetDatabaseClusterComponents(ctx echo.Context, namespace string, name string) error
	// Get database cluster credentials
	// (GET /namespaces/{namespace}/database-clusters/{name}/credentials)
	GetDatabaseClusterCredentials(ctx echo.Context, namespace string, name string) error
	// Get the Point-in-Time recovery info
	// (GET /namespaces/{namespace}/database-clusters/{name}/pitr)
	GetDatabaseClusterPitr(ctx echo.Context, namespace string, name string) error
	// List database engines
	// (GET /namespaces/{namespace}/database-engines)
	ListDatabaseEngines(ctx echo.Context, namespace string) error
	// Get upgrade plan
	// (GET /namespaces/{namespace}/database-engines/upgrade-plan)
	GetUpgradePlan(ctx echo.Context, namespace string) error
	// Upgrade database engine operators
	// (POST /namespaces/{namespace}/database-engines/upgrade-plan/approval)
	ApproveUpgradePlan(ctx echo.Context, namespace string) error
	// Get database engine
	// (GET /namespaces/{namespace}/database-engines/{name})
	GetDatabaseEngine(ctx echo.Context, namespace string, name string) error
	// Update database engine
	// (PUT /namespaces/{namespace}/database-engines/{name})
	UpdateDatabaseEngine(ctx echo.Context, namespace string, name string) error
	// List monitoring instances
	// (GET /namespaces/{namespace}/monitoring-instances)
	ListMonitoringInstances(ctx echo.Context, namespace string) error
	// Create monitoring instance
	// (POST /namespaces/{namespace}/monitoring-instances)
	CreateMonitoringInstance(ctx echo.Context, namespace string) error
	// Delete monitoring instnace
	// (DELETE /namespaces/{namespace}/monitoring-instances/{name})
	DeleteMonitoringInstance(ctx echo.Context, namespace string, name string) error
	// Get monitoring instance
	// (GET /namespaces/{namespace}/monitoring-instances/{name})
	GetMonitoringInstance(ctx echo.Context, namespace string, name string) error
	// Update monitoring instance
	// (PATCH /namespaces/{namespace}/monitoring-instances/{name})
	UpdateMonitoringInstance(ctx echo.Context, namespace string, name string) error
	// Get user permissions
	// (GET /permissions)
	GetUserPermissions(ctx echo.Context) error
	// List pod scheduling policies
	// (GET /pod-scheduling-policies)
	ListPodSchedulingPolicy(ctx echo.Context, params ListPodSchedulingPolicyParams) error
	// Create pod scheduling policy
	// (POST /pod-scheduling-policies)
	CreatePodSchedulingPolicy(ctx echo.Context) error
	// Delete pod scheduling policy
	// (DELETE /pod-scheduling-policies/{policy-name})
	DeletePodSchedulingPolicy(ctx echo.Context, policyName string) error
	// Get pod scheduling policy
	// (GET /pod-scheduling-policies/{policy-name})
	GetPodSchedulingPolicy(ctx echo.Context, policyName string) error
	// Update pod scheduling policy
	// (PUT /pod-scheduling-policies/{policy-name})
	UpdatePodSchedulingPolicy(ctx echo.Context, policyName string) error
	// Cluster resources
	// (GET /resources)
	GetKubernetesClusterResources(ctx echo.Context) error
	// Everest API Logout
	// (DELETE /session)
	DeleteSession(ctx echo.Context) error
	// Everest API Login
	// (POST /session)
	CreateSession(ctx echo.Context) error
	// Settings
	// (GET /settings)
	GetSettings(ctx echo.Context) error
	// Version
	// (GET /version)
	VersionInfo(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetKubernetesClusterInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetKubernetesClusterInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetKubernetesClusterInfo(ctx)
	return err
}

// ListDataImporters converts echo context to params.
func (w *ServerInterfaceWrapper) ListDataImporters(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDataImportersParams
	// ------------- Optional query parameter "supportedEngines" -------------

	err = runtime.BindQueryParameter("form", true, false, "supportedEngines", ctx.QueryParams(), &params.SupportedEngines)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter supportedEngines: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListDataImporters(ctx, params)
	return err
}

// ListNamespaces converts echo context to params.
func (w *ServerInterfaceWrapper) ListNamespaces(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListNamespaces(ctx)
	return err
}

// ListBackupStorages converts echo context to params.
func (w *ServerInterfaceWrapper) ListBackupStorages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListBackupStorages(ctx, namespace)
	return err
}

// CreateBackupStorage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBackupStorage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateBackupStorage(ctx, namespace)
	return err
}

// DeleteBackupStorage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBackupStorage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteBackupStorage(ctx, namespace, name)
	return err
}

// GetBackupStorage converts echo context to params.
func (w *ServerInterfaceWrapper) GetBackupStorage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBackupStorage(ctx, namespace, name)
	return err
}

// UpdateBackupStorage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateBackupStorage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateBackupStorage(ctx, namespace, name)
	return err
}

// CreateDatabaseClusterBackup converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDatabaseClusterBackup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDatabaseClusterBackup(ctx, namespace)
	return err
}

// DeleteDatabaseClusterBackup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDatabaseClusterBackup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteDatabaseClusterBackupParams
	// ------------- Optional query parameter "cleanupBackupStorage" -------------

	err = runtime.BindQueryParameter("form", true, false, "cleanupBackupStorage", ctx.QueryParams(), &params.CleanupBackupStorage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cleanupBackupStorage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDatabaseClusterBackup(ctx, namespace, name, params)
	return err
}

// GetDatabaseClusterBackup converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseClusterBackup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatabaseClusterBackup(ctx, namespace, name)
	return err
}

// CreateDatabaseClusterRestore converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDatabaseClusterRestore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDatabaseClusterRestore(ctx, namespace)
	return err
}

// DeleteDatabaseClusterRestore converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDatabaseClusterRestore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDatabaseClusterRestore(ctx, namespace, name)
	return err
}

// GetDatabaseClusterRestore converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseClusterRestore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatabaseClusterRestore(ctx, namespace, name)
	return err
}

// UpdateDatabaseClusterRestore converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDatabaseClusterRestore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDatabaseClusterRestore(ctx, namespace, name)
	return err
}

// ListDatabaseClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabaseClusters(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListDatabaseClusters(ctx, namespace)
	return err
}

// CreateDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDatabaseCluster(ctx, namespace)
	return err
}

// ListDatabaseClusterBackups converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabaseClusterBackups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "cluster-name" -------------
	var clusterName string

	err = runtime.BindStyledParameterWithOptions("simple", "cluster-name", ctx.Param("cluster-name"), &clusterName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster-name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListDatabaseClusterBackups(ctx, namespace, clusterName)
	return err
}

// ListDatabaseClusterRestores converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabaseClusterRestores(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "cluster-name" -------------
	var clusterName string

	err = runtime.BindStyledParameterWithOptions("simple", "cluster-name", ctx.Param("cluster-name"), &clusterName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster-name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListDatabaseClusterRestores(ctx, namespace, clusterName)
	return err
}

// ListDataImportJobs converts echo context to params.
func (w *ServerInterfaceWrapper) ListDataImportJobs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "dbName" -------------
	var dbName string

	err = runtime.BindStyledParameterWithOptions("simple", "dbName", ctx.Param("dbName"), &dbName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dbName: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListDataImportJobs(ctx, namespace, dbName)
	return err
}

// CreateDatabaseClusterSecret converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDatabaseClusterSecret(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "dbName" -------------
	var dbName string

	err = runtime.BindStyledParameterWithOptions("simple", "dbName", ctx.Param("dbName"), &dbName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dbName: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateDatabaseClusterSecretParams
	// ------------- Optional query parameter "secretName" -------------

	err = runtime.BindQueryParameter("form", true, false, "secretName", ctx.QueryParams(), &params.SecretName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter secretName: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDatabaseClusterSecret(ctx, namespace, dbName, params)
	return err
}

// DeleteDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteDatabaseClusterParams
	// ------------- Optional query parameter "cleanupBackupStorage" -------------

	err = runtime.BindQueryParameter("form", true, false, "cleanupBackupStorage", ctx.QueryParams(), &params.CleanupBackupStorage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cleanupBackupStorage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDatabaseCluster(ctx, namespace, name, params)
	return err
}

// GetDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatabaseCluster(ctx, namespace, name)
	return err
}

// UpdateDatabaseCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDatabaseCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDatabaseCluster(ctx, namespace, name)
	return err
}

// GetDatabaseClusterComponents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseClusterComponents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatabaseClusterComponents(ctx, namespace, name)
	return err
}

// GetDatabaseClusterCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseClusterCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatabaseClusterCredentials(ctx, namespace, name)
	return err
}

// GetDatabaseClusterPitr converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseClusterPitr(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatabaseClusterPitr(ctx, namespace, name)
	return err
}

// ListDatabaseEngines converts echo context to params.
func (w *ServerInterfaceWrapper) ListDatabaseEngines(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListDatabaseEngines(ctx, namespace)
	return err
}

// GetUpgradePlan converts echo context to params.
func (w *ServerInterfaceWrapper) GetUpgradePlan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUpgradePlan(ctx, namespace)
	return err
}

// ApproveUpgradePlan converts echo context to params.
func (w *ServerInterfaceWrapper) ApproveUpgradePlan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApproveUpgradePlan(ctx, namespace)
	return err
}

// GetDatabaseEngine converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatabaseEngine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatabaseEngine(ctx, namespace, name)
	return err
}

// UpdateDatabaseEngine converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDatabaseEngine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDatabaseEngine(ctx, namespace, name)
	return err
}

// ListMonitoringInstances converts echo context to params.
func (w *ServerInterfaceWrapper) ListMonitoringInstances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListMonitoringInstances(ctx, namespace)
	return err
}

// CreateMonitoringInstance converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMonitoringInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateMonitoringInstance(ctx, namespace)
	return err
}

// DeleteMonitoringInstance converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMonitoringInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMonitoringInstance(ctx, namespace, name)
	return err
}

// GetMonitoringInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetMonitoringInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMonitoringInstance(ctx, namespace, name)
	return err
}

// UpdateMonitoringInstance converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMonitoringInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", ctx.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateMonitoringInstance(ctx, namespace, name)
	return err
}

// GetUserPermissions converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserPermissions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserPermissions(ctx)
	return err
}

// ListPodSchedulingPolicy converts echo context to params.
func (w *ServerInterfaceWrapper) ListPodSchedulingPolicy(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPodSchedulingPolicyParams
	// ------------- Optional query parameter "engineType" -------------

	err = runtime.BindQueryParameter("form", true, false, "engineType", ctx.QueryParams(), &params.EngineType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter engineType: %s", err))
	}

	// ------------- Optional query parameter "hasRules" -------------

	err = runtime.BindQueryParameter("form", true, false, "hasRules", ctx.QueryParams(), &params.HasRules)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hasRules: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPodSchedulingPolicy(ctx, params)
	return err
}

// CreatePodSchedulingPolicy converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePodSchedulingPolicy(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePodSchedulingPolicy(ctx)
	return err
}

// DeletePodSchedulingPolicy converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePodSchedulingPolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policy-name" -------------
	var policyName string

	err = runtime.BindStyledParameterWithOptions("simple", "policy-name", ctx.Param("policy-name"), &policyName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policy-name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePodSchedulingPolicy(ctx, policyName)
	return err
}

// GetPodSchedulingPolicy converts echo context to params.
func (w *ServerInterfaceWrapper) GetPodSchedulingPolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policy-name" -------------
	var policyName string

	err = runtime.BindStyledParameterWithOptions("simple", "policy-name", ctx.Param("policy-name"), &policyName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policy-name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPodSchedulingPolicy(ctx, policyName)
	return err
}

// UpdatePodSchedulingPolicy converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePodSchedulingPolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policy-name" -------------
	var policyName string

	err = runtime.BindStyledParameterWithOptions("simple", "policy-name", ctx.Param("policy-name"), &policyName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policy-name: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePodSchedulingPolicy(ctx, policyName)
	return err
}

// GetKubernetesClusterResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetKubernetesClusterResources(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetKubernetesClusterResources(ctx)
	return err
}

// DeleteSession converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSession(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSession(ctx)
	return err
}

// CreateSession converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSession(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateSession(ctx)
	return err
}

// GetSettings converts echo context to params.
func (w *ServerInterfaceWrapper) GetSettings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSettings(ctx)
	return err
}

// VersionInfo converts echo context to params.
func (w *ServerInterfaceWrapper) VersionInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VersionInfo(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/cluster-info", wrapper.GetKubernetesClusterInfo)
	router.GET(baseURL+"/data-importers", wrapper.ListDataImporters)
	router.GET(baseURL+"/namespaces", wrapper.ListNamespaces)
	router.GET(baseURL+"/namespaces/:namespace/backup-storages", wrapper.ListBackupStorages)
	router.POST(baseURL+"/namespaces/:namespace/backup-storages", wrapper.CreateBackupStorage)
	router.DELETE(baseURL+"/namespaces/:namespace/backup-storages/:name", wrapper.DeleteBackupStorage)
	router.GET(baseURL+"/namespaces/:namespace/backup-storages/:name", wrapper.GetBackupStorage)
	router.PATCH(baseURL+"/namespaces/:namespace/backup-storages/:name", wrapper.UpdateBackupStorage)
	router.POST(baseURL+"/namespaces/:namespace/database-cluster-backups", wrapper.CreateDatabaseClusterBackup)
	router.DELETE(baseURL+"/namespaces/:namespace/database-cluster-backups/:name", wrapper.DeleteDatabaseClusterBackup)
	router.GET(baseURL+"/namespaces/:namespace/database-cluster-backups/:name", wrapper.GetDatabaseClusterBackup)
	router.POST(baseURL+"/namespaces/:namespace/database-cluster-restores", wrapper.CreateDatabaseClusterRestore)
	router.DELETE(baseURL+"/namespaces/:namespace/database-cluster-restores/:name", wrapper.DeleteDatabaseClusterRestore)
	router.GET(baseURL+"/namespaces/:namespace/database-cluster-restores/:name", wrapper.GetDatabaseClusterRestore)
	router.PUT(baseURL+"/namespaces/:namespace/database-cluster-restores/:name", wrapper.UpdateDatabaseClusterRestore)
	router.GET(baseURL+"/namespaces/:namespace/database-clusters", wrapper.ListDatabaseClusters)
	router.POST(baseURL+"/namespaces/:namespace/database-clusters", wrapper.CreateDatabaseCluster)
	router.GET(baseURL+"/namespaces/:namespace/database-clusters/:cluster-name/backups", wrapper.ListDatabaseClusterBackups)
	router.GET(baseURL+"/namespaces/:namespace/database-clusters/:cluster-name/restores", wrapper.ListDatabaseClusterRestores)
	router.GET(baseURL+"/namespaces/:namespace/database-clusters/:dbName/data-import-jobs", wrapper.ListDataImportJobs)
	router.POST(baseURL+"/namespaces/:namespace/database-clusters/:dbName/secret", wrapper.CreateDatabaseClusterSecret)
	router.DELETE(baseURL+"/namespaces/:namespace/database-clusters/:name", wrapper.DeleteDatabaseCluster)
	router.GET(baseURL+"/namespaces/:namespace/database-clusters/:name", wrapper.GetDatabaseCluster)
	router.PUT(baseURL+"/namespaces/:namespace/database-clusters/:name", wrapper.UpdateDatabaseCluster)
	router.GET(baseURL+"/namespaces/:namespace/database-clusters/:name/components", wrapper.GetDatabaseClusterComponents)
	router.GET(baseURL+"/namespaces/:namespace/database-clusters/:name/credentials", wrapper.GetDatabaseClusterCredentials)
	router.GET(baseURL+"/namespaces/:namespace/database-clusters/:name/pitr", wrapper.GetDatabaseClusterPitr)
	router.GET(baseURL+"/namespaces/:namespace/database-engines", wrapper.ListDatabaseEngines)
	router.GET(baseURL+"/namespaces/:namespace/database-engines/upgrade-plan", wrapper.GetUpgradePlan)
	router.POST(baseURL+"/namespaces/:namespace/database-engines/upgrade-plan/approval", wrapper.ApproveUpgradePlan)
	router.GET(baseURL+"/namespaces/:namespace/database-engines/:name", wrapper.GetDatabaseEngine)
	router.PUT(baseURL+"/namespaces/:namespace/database-engines/:name", wrapper.UpdateDatabaseEngine)
	router.GET(baseURL+"/namespaces/:namespace/monitoring-instances", wrapper.ListMonitoringInstances)
	router.POST(baseURL+"/namespaces/:namespace/monitoring-instances", wrapper.CreateMonitoringInstance)
	router.DELETE(baseURL+"/namespaces/:namespace/monitoring-instances/:name", wrapper.DeleteMonitoringInstance)
	router.GET(baseURL+"/namespaces/:namespace/monitoring-instances/:name", wrapper.GetMonitoringInstance)
	router.PATCH(baseURL+"/namespaces/:namespace/monitoring-instances/:name", wrapper.UpdateMonitoringInstance)
	router.GET(baseURL+"/permissions", wrapper.GetUserPermissions)
	router.GET(baseURL+"/pod-scheduling-policies", wrapper.ListPodSchedulingPolicy)
	router.POST(baseURL+"/pod-scheduling-policies", wrapper.CreatePodSchedulingPolicy)
	router.DELETE(baseURL+"/pod-scheduling-policies/:policy-name", wrapper.DeletePodSchedulingPolicy)
	router.GET(baseURL+"/pod-scheduling-policies/:policy-name", wrapper.GetPodSchedulingPolicy)
	router.PUT(baseURL+"/pod-scheduling-policies/:policy-name", wrapper.UpdatePodSchedulingPolicy)
	router.GET(baseURL+"/resources", wrapper.GetKubernetesClusterResources)
	router.DELETE(baseURL+"/session", wrapper.DeleteSession)
	router.POST(baseURL+"/session", wrapper.CreateSession)
	router.GET(baseURL+"/settings", wrapper.GetSettings)
	router.GET(baseURL+"/version", wrapper.VersionInfo)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{
	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
