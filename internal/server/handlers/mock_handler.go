// Code generated by mockery v2.53.4. DO NOT EDIT.

package handlers

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"

	v1alpha1 "github.com/percona/everest-operator/api/v1alpha1"
	api "github.com/percona/everest/api"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

// ApproveUpgradePlan provides a mock function with given fields: ctx, namespace
func (_m *MockHandler) ApproveUpgradePlan(ctx context.Context, namespace string) error {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for ApproveUpgradePlan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBackupStorage provides a mock function with given fields: ctx, namespace, req
func (_m *MockHandler) CreateBackupStorage(ctx context.Context, namespace string, req *api.CreateBackupStorageParams) (*v1alpha1.BackupStorage, error) {
	ret := _m.Called(ctx, namespace, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackupStorage")
	}

	var r0 *v1alpha1.BackupStorage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.CreateBackupStorageParams) (*v1alpha1.BackupStorage, error)); ok {
		return rf(ctx, namespace, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.CreateBackupStorageParams) *v1alpha1.BackupStorage); ok {
		r0 = rf(ctx, namespace, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.BackupStorage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *api.CreateBackupStorageParams) error); ok {
		r1 = rf(ctx, namespace, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDatabaseCluster provides a mock function with given fields: ctx, req
func (_m *MockHandler) CreateDatabaseCluster(ctx context.Context, req *v1alpha1.DatabaseCluster) (*v1alpha1.DatabaseCluster, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseCluster")
	}

	var r0 *v1alpha1.DatabaseCluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.DatabaseCluster) (*v1alpha1.DatabaseCluster, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.DatabaseCluster) *v1alpha1.DatabaseCluster); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.DatabaseCluster) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDatabaseClusterBackup provides a mock function with given fields: ctx, req
func (_m *MockHandler) CreateDatabaseClusterBackup(ctx context.Context, req *v1alpha1.DatabaseClusterBackup) (*v1alpha1.DatabaseClusterBackup, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseClusterBackup")
	}

	var r0 *v1alpha1.DatabaseClusterBackup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.DatabaseClusterBackup) (*v1alpha1.DatabaseClusterBackup, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.DatabaseClusterBackup) *v1alpha1.DatabaseClusterBackup); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseClusterBackup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.DatabaseClusterBackup) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDatabaseClusterRestore provides a mock function with given fields: ctx, req
func (_m *MockHandler) CreateDatabaseClusterRestore(ctx context.Context, req *v1alpha1.DatabaseClusterRestore) (*v1alpha1.DatabaseClusterRestore, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseClusterRestore")
	}

	var r0 *v1alpha1.DatabaseClusterRestore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.DatabaseClusterRestore) (*v1alpha1.DatabaseClusterRestore, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.DatabaseClusterRestore) *v1alpha1.DatabaseClusterRestore); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseClusterRestore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.DatabaseClusterRestore) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDatabaseClusterSecret provides a mock function with given fields: ctx, namespace, dbName, secret
func (_m *MockHandler) CreateDatabaseClusterSecret(ctx context.Context, namespace string, dbName string, secret *v1.Secret) (*v1.Secret, error) {
	ret := _m.Called(ctx, namespace, dbName, secret)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseClusterSecret")
	}

	var r0 *v1.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *v1.Secret) (*v1.Secret, error)); ok {
		return rf(ctx, namespace, dbName, secret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *v1.Secret) *v1.Secret); ok {
		r0 = rf(ctx, namespace, dbName, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *v1.Secret) error); ok {
		r1 = rf(ctx, namespace, dbName, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMonitoringInstance provides a mock function with given fields: ctx, namespace, req
func (_m *MockHandler) CreateMonitoringInstance(ctx context.Context, namespace string, req *api.MonitoringInstanceCreateParams) (*v1alpha1.MonitoringConfig, error) {
	ret := _m.Called(ctx, namespace, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateMonitoringInstance")
	}

	var r0 *v1alpha1.MonitoringConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.MonitoringInstanceCreateParams) (*v1alpha1.MonitoringConfig, error)); ok {
		return rf(ctx, namespace, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.MonitoringInstanceCreateParams) *v1alpha1.MonitoringConfig); ok {
		r0 = rf(ctx, namespace, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.MonitoringConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *api.MonitoringInstanceCreateParams) error); ok {
		r1 = rf(ctx, namespace, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePodSchedulingPolicy provides a mock function with given fields: ctx, psp
func (_m *MockHandler) CreatePodSchedulingPolicy(ctx context.Context, psp *v1alpha1.PodSchedulingPolicy) (*v1alpha1.PodSchedulingPolicy, error) {
	ret := _m.Called(ctx, psp)

	if len(ret) == 0 {
		panic("no return value specified for CreatePodSchedulingPolicy")
	}

	var r0 *v1alpha1.PodSchedulingPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.PodSchedulingPolicy) (*v1alpha1.PodSchedulingPolicy, error)); ok {
		return rf(ctx, psp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.PodSchedulingPolicy) *v1alpha1.PodSchedulingPolicy); ok {
		r0 = rf(ctx, psp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.PodSchedulingPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.PodSchedulingPolicy) error); ok {
		r1 = rf(ctx, psp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackupStorage provides a mock function with given fields: ctx, namespace, name
func (_m *MockHandler) DeleteBackupStorage(ctx context.Context, namespace string, name string) error {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackupStorage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDatabaseCluster provides a mock function with given fields: ctx, namespace, name, delReq
func (_m *MockHandler) DeleteDatabaseCluster(ctx context.Context, namespace string, name string, delReq *api.DeleteDatabaseClusterParams) error {
	ret := _m.Called(ctx, namespace, name, delReq)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabaseCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *api.DeleteDatabaseClusterParams) error); ok {
		r0 = rf(ctx, namespace, name, delReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDatabaseClusterBackup provides a mock function with given fields: ctx, namespace, name, req
func (_m *MockHandler) DeleteDatabaseClusterBackup(ctx context.Context, namespace string, name string, req *api.DeleteDatabaseClusterBackupParams) error {
	ret := _m.Called(ctx, namespace, name, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabaseClusterBackup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *api.DeleteDatabaseClusterBackupParams) error); ok {
		r0 = rf(ctx, namespace, name, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDatabaseClusterRestore provides a mock function with given fields: ctx, namespace, name
func (_m *MockHandler) DeleteDatabaseClusterRestore(ctx context.Context, namespace string, name string) error {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabaseClusterRestore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMonitoringInstance provides a mock function with given fields: ctx, namespace, name
func (_m *MockHandler) DeleteMonitoringInstance(ctx context.Context, namespace string, name string) error {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMonitoringInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePodSchedulingPolicy provides a mock function with given fields: ctx, name
func (_m *MockHandler) DeletePodSchedulingPolicy(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeletePodSchedulingPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBackupStorage provides a mock function with given fields: ctx, namespace, name
func (_m *MockHandler) GetBackupStorage(ctx context.Context, namespace string, name string) (*v1alpha1.BackupStorage, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupStorage")
	}

	var r0 *v1alpha1.BackupStorage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.BackupStorage, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.BackupStorage); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.BackupStorage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabaseCluster provides a mock function with given fields: ctx, namespace, name
func (_m *MockHandler) GetDatabaseCluster(ctx context.Context, namespace string, name string) (*v1alpha1.DatabaseCluster, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseCluster")
	}

	var r0 *v1alpha1.DatabaseCluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.DatabaseCluster, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.DatabaseCluster); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabaseClusterBackup provides a mock function with given fields: ctx, namespace, name
func (_m *MockHandler) GetDatabaseClusterBackup(ctx context.Context, namespace string, name string) (*v1alpha1.DatabaseClusterBackup, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseClusterBackup")
	}

	var r0 *v1alpha1.DatabaseClusterBackup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.DatabaseClusterBackup, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.DatabaseClusterBackup); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseClusterBackup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabaseClusterComponents provides a mock function with given fields: ctx, namespace, name
func (_m *MockHandler) GetDatabaseClusterComponents(ctx context.Context, namespace string, name string) ([]api.DatabaseClusterComponent, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseClusterComponents")
	}

	var r0 []api.DatabaseClusterComponent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]api.DatabaseClusterComponent, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []api.DatabaseClusterComponent); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.DatabaseClusterComponent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabaseClusterCredentials provides a mock function with given fields: ctx, namespace, name
func (_m *MockHandler) GetDatabaseClusterCredentials(ctx context.Context, namespace string, name string) (*api.DatabaseClusterCredential, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseClusterCredentials")
	}

	var r0 *api.DatabaseClusterCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*api.DatabaseClusterCredential, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *api.DatabaseClusterCredential); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.DatabaseClusterCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabaseClusterPitr provides a mock function with given fields: ctx, namespace, name
func (_m *MockHandler) GetDatabaseClusterPitr(ctx context.Context, namespace string, name string) (*api.DatabaseClusterPitr, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseClusterPitr")
	}

	var r0 *api.DatabaseClusterPitr
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*api.DatabaseClusterPitr, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *api.DatabaseClusterPitr); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.DatabaseClusterPitr)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabaseClusterRestore provides a mock function with given fields: ctx, namespace, name
func (_m *MockHandler) GetDatabaseClusterRestore(ctx context.Context, namespace string, name string) (*v1alpha1.DatabaseClusterRestore, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseClusterRestore")
	}

	var r0 *v1alpha1.DatabaseClusterRestore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.DatabaseClusterRestore, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.DatabaseClusterRestore); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseClusterRestore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabaseEngine provides a mock function with given fields: ctx, namespace, name
func (_m *MockHandler) GetDatabaseEngine(ctx context.Context, namespace string, name string) (*v1alpha1.DatabaseEngine, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseEngine")
	}

	var r0 *v1alpha1.DatabaseEngine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.DatabaseEngine, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.DatabaseEngine); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseEngine)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKubernetesClusterInfo provides a mock function with given fields: ctx
func (_m *MockHandler) GetKubernetesClusterInfo(ctx context.Context) (*api.KubernetesClusterInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetKubernetesClusterInfo")
	}

	var r0 *api.KubernetesClusterInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*api.KubernetesClusterInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *api.KubernetesClusterInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.KubernetesClusterInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKubernetesClusterResources provides a mock function with given fields: ctx
func (_m *MockHandler) GetKubernetesClusterResources(ctx context.Context) (*api.KubernetesClusterResources, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetKubernetesClusterResources")
	}

	var r0 *api.KubernetesClusterResources
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*api.KubernetesClusterResources, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *api.KubernetesClusterResources); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.KubernetesClusterResources)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonitoringInstance provides a mock function with given fields: ctx, namespace, name
func (_m *MockHandler) GetMonitoringInstance(ctx context.Context, namespace string, name string) (*v1alpha1.MonitoringConfig, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetMonitoringInstance")
	}

	var r0 *v1alpha1.MonitoringConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.MonitoringConfig, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.MonitoringConfig); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.MonitoringConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPodSchedulingPolicy provides a mock function with given fields: ctx, name
func (_m *MockHandler) GetPodSchedulingPolicy(ctx context.Context, name string) (*v1alpha1.PodSchedulingPolicy, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetPodSchedulingPolicy")
	}

	var r0 *v1alpha1.PodSchedulingPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1alpha1.PodSchedulingPolicy, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1alpha1.PodSchedulingPolicy); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.PodSchedulingPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSettings provides a mock function with given fields: ctx
func (_m *MockHandler) GetSettings(ctx context.Context) (*api.Settings, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSettings")
	}

	var r0 *api.Settings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*api.Settings, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *api.Settings); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Settings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpgradePlan provides a mock function with given fields: ctx, namespace
func (_m *MockHandler) GetUpgradePlan(ctx context.Context, namespace string) (*api.UpgradePlan, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetUpgradePlan")
	}

	var r0 *api.UpgradePlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*api.UpgradePlan, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *api.UpgradePlan); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.UpgradePlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPermissions provides a mock function with given fields: ctx
func (_m *MockHandler) GetUserPermissions(ctx context.Context) (*api.UserPermissions, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPermissions")
	}

	var r0 *api.UserPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*api.UserPermissions, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *api.UserPermissions); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.UserPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBackupStorages provides a mock function with given fields: ctx, namespace
func (_m *MockHandler) ListBackupStorages(ctx context.Context, namespace string) (*v1alpha1.BackupStorageList, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupStorages")
	}

	var r0 *v1alpha1.BackupStorageList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1alpha1.BackupStorageList, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1alpha1.BackupStorageList); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.BackupStorageList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataImportJobs provides a mock function with given fields: ctx, namespace, dbName
func (_m *MockHandler) ListDataImportJobs(ctx context.Context, namespace string, dbName string) (*v1alpha1.DataImportJobList, error) {
	ret := _m.Called(ctx, namespace, dbName)

	if len(ret) == 0 {
		panic("no return value specified for ListDataImportJobs")
	}

	var r0 *v1alpha1.DataImportJobList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.DataImportJobList, error)); ok {
		return rf(ctx, namespace, dbName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.DataImportJobList); ok {
		r0 = rf(ctx, namespace, dbName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DataImportJobList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, dbName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataImporters provides a mock function with given fields: ctx, supportedEngines
func (_m *MockHandler) ListDataImporters(ctx context.Context, supportedEngines ...string) (*v1alpha1.DataImporterList, error) {
	_va := make([]interface{}, len(supportedEngines))
	for _i := range supportedEngines {
		_va[_i] = supportedEngines[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataImporters")
	}

	var r0 *v1alpha1.DataImporterList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) (*v1alpha1.DataImporterList, error)); ok {
		return rf(ctx, supportedEngines...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v1alpha1.DataImporterList); ok {
		r0 = rf(ctx, supportedEngines...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DataImporterList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, supportedEngines...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatabaseClusterBackups provides a mock function with given fields: ctx, namespace, clusterName
func (_m *MockHandler) ListDatabaseClusterBackups(ctx context.Context, namespace string, clusterName string) (*v1alpha1.DatabaseClusterBackupList, error) {
	ret := _m.Called(ctx, namespace, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseClusterBackups")
	}

	var r0 *v1alpha1.DatabaseClusterBackupList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.DatabaseClusterBackupList, error)); ok {
		return rf(ctx, namespace, clusterName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.DatabaseClusterBackupList); ok {
		r0 = rf(ctx, namespace, clusterName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseClusterBackupList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, clusterName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatabaseClusterRestores provides a mock function with given fields: ctx, namespace, clusterName
func (_m *MockHandler) ListDatabaseClusterRestores(ctx context.Context, namespace string, clusterName string) (*v1alpha1.DatabaseClusterRestoreList, error) {
	ret := _m.Called(ctx, namespace, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseClusterRestores")
	}

	var r0 *v1alpha1.DatabaseClusterRestoreList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.DatabaseClusterRestoreList, error)); ok {
		return rf(ctx, namespace, clusterName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.DatabaseClusterRestoreList); ok {
		r0 = rf(ctx, namespace, clusterName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseClusterRestoreList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, clusterName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatabaseClusters provides a mock function with given fields: ctx, namespace
func (_m *MockHandler) ListDatabaseClusters(ctx context.Context, namespace string) (*v1alpha1.DatabaseClusterList, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseClusters")
	}

	var r0 *v1alpha1.DatabaseClusterList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1alpha1.DatabaseClusterList, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1alpha1.DatabaseClusterList); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseClusterList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatabaseEngines provides a mock function with given fields: ctx, namespace
func (_m *MockHandler) ListDatabaseEngines(ctx context.Context, namespace string) (*v1alpha1.DatabaseEngineList, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabaseEngines")
	}

	var r0 *v1alpha1.DatabaseEngineList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1alpha1.DatabaseEngineList, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1alpha1.DatabaseEngineList); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseEngineList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMonitoringInstances provides a mock function with given fields: ctx, namespaces
func (_m *MockHandler) ListMonitoringInstances(ctx context.Context, namespaces string) (*v1alpha1.MonitoringConfigList, error) {
	ret := _m.Called(ctx, namespaces)

	if len(ret) == 0 {
		panic("no return value specified for ListMonitoringInstances")
	}

	var r0 *v1alpha1.MonitoringConfigList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1alpha1.MonitoringConfigList, error)); ok {
		return rf(ctx, namespaces)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1alpha1.MonitoringConfigList); ok {
		r0 = rf(ctx, namespaces)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.MonitoringConfigList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespaces)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamespaces provides a mock function with given fields: ctx
func (_m *MockHandler) ListNamespaces(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListNamespaces")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPodSchedulingPolicies provides a mock function with given fields: ctx, params
func (_m *MockHandler) ListPodSchedulingPolicies(ctx context.Context, params *api.ListPodSchedulingPolicyParams) (*v1alpha1.PodSchedulingPolicyList, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListPodSchedulingPolicies")
	}

	var r0 *v1alpha1.PodSchedulingPolicyList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.ListPodSchedulingPolicyParams) (*v1alpha1.PodSchedulingPolicyList, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.ListPodSchedulingPolicyParams) *v1alpha1.PodSchedulingPolicyList); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.PodSchedulingPolicyList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.ListPodSchedulingPolicyParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNext provides a mock function with given fields: h
func (_m *MockHandler) SetNext(h Handler) {
	_m.Called(h)
}

// UpdateBackupStorage provides a mock function with given fields: ctx, name, namespace, req
func (_m *MockHandler) UpdateBackupStorage(ctx context.Context, name string, namespace string, req *api.UpdateBackupStorageParams) (*v1alpha1.BackupStorage, error) {
	ret := _m.Called(ctx, name, namespace, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBackupStorage")
	}

	var r0 *v1alpha1.BackupStorage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *api.UpdateBackupStorageParams) (*v1alpha1.BackupStorage, error)); ok {
		return rf(ctx, name, namespace, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *api.UpdateBackupStorageParams) *v1alpha1.BackupStorage); ok {
		r0 = rf(ctx, name, namespace, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.BackupStorage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *api.UpdateBackupStorageParams) error); ok {
		r1 = rf(ctx, name, namespace, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDatabaseCluster provides a mock function with given fields: ctx, req
func (_m *MockHandler) UpdateDatabaseCluster(ctx context.Context, req *v1alpha1.DatabaseCluster) (*v1alpha1.DatabaseCluster, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatabaseCluster")
	}

	var r0 *v1alpha1.DatabaseCluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.DatabaseCluster) (*v1alpha1.DatabaseCluster, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.DatabaseCluster) *v1alpha1.DatabaseCluster); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.DatabaseCluster) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDatabaseClusterRestore provides a mock function with given fields: ctx, req
func (_m *MockHandler) UpdateDatabaseClusterRestore(ctx context.Context, req *v1alpha1.DatabaseClusterRestore) (*v1alpha1.DatabaseClusterRestore, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatabaseClusterRestore")
	}

	var r0 *v1alpha1.DatabaseClusterRestore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.DatabaseClusterRestore) (*v1alpha1.DatabaseClusterRestore, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.DatabaseClusterRestore) *v1alpha1.DatabaseClusterRestore); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseClusterRestore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.DatabaseClusterRestore) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDatabaseEngine provides a mock function with given fields: ctx, req
func (_m *MockHandler) UpdateDatabaseEngine(ctx context.Context, req *v1alpha1.DatabaseEngine) (*v1alpha1.DatabaseEngine, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatabaseEngine")
	}

	var r0 *v1alpha1.DatabaseEngine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.DatabaseEngine) (*v1alpha1.DatabaseEngine, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.DatabaseEngine) *v1alpha1.DatabaseEngine); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DatabaseEngine)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.DatabaseEngine) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMonitoringInstance provides a mock function with given fields: ctx, namespace, name, req
func (_m *MockHandler) UpdateMonitoringInstance(ctx context.Context, namespace string, name string, req *api.MonitoringInstanceUpdateParams) (*v1alpha1.MonitoringConfig, error) {
	ret := _m.Called(ctx, namespace, name, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMonitoringInstance")
	}

	var r0 *v1alpha1.MonitoringConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *api.MonitoringInstanceUpdateParams) (*v1alpha1.MonitoringConfig, error)); ok {
		return rf(ctx, namespace, name, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *api.MonitoringInstanceUpdateParams) *v1alpha1.MonitoringConfig); ok {
		r0 = rf(ctx, namespace, name, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.MonitoringConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *api.MonitoringInstanceUpdateParams) error); ok {
		r1 = rf(ctx, namespace, name, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePodSchedulingPolicy provides a mock function with given fields: ctx, psp
func (_m *MockHandler) UpdatePodSchedulingPolicy(ctx context.Context, psp *v1alpha1.PodSchedulingPolicy) (*v1alpha1.PodSchedulingPolicy, error) {
	ret := _m.Called(ctx, psp)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePodSchedulingPolicy")
	}

	var r0 *v1alpha1.PodSchedulingPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.PodSchedulingPolicy) (*v1alpha1.PodSchedulingPolicy, error)); ok {
		return rf(ctx, psp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.PodSchedulingPolicy) *v1alpha1.PodSchedulingPolicy); ok {
		r0 = rf(ctx, psp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.PodSchedulingPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.PodSchedulingPolicy) error); ok {
		r1 = rf(ctx, psp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
